# Required Env Vars
# NPM_TOKEN

# Main Config
version: 2.1
# reusable environment for all jobs
executors:
  main-executor:
    working_directory: ~/webex-js-sdk
    docker:
      - image: circleci/node:carbon-browsers

orbs:
  jq: circleci/jq@1.9.0

commands:
  checkout_and_fetch:
    description: 'Checkout and fetch tags'
    steps:
      - checkout
      - run: git remote add upstream git@github.com:webex/webex-js-sdk.git
      - run: git fetch upstream --tags
  restore_node_modules:
    description: 'Restore the node_modules dependencies cache'
    steps:
      - restore_cache:
          keys:
            - node-module-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-module-cache-v1-{{ .Branch }}-
            - node-module-cache-v1-
  restore_built_packages:
    description: 'Restore built packages'
    steps:
      - attach_workspace:
          at: ~/webex-js-sdk
  skip_check:
    description: 'Check to see if testing needs to be skipped'
    steps:
      - run:
          name: Check if we need to skip
          command: if [[ -z $(node tooling/modified-packages.js) ]]; then circleci step halt; fi

# Main Config
jobs:
  validate_config:
    executor: main-executor
    steps:
      - checkout
      - run:
          name: 'Validate CircleCI config'
          command: circleci config validate

  npm_install:
    executor: main-executor
    environment:
      SAUCE_CONNECT_DOWNLOAD_ON_INSTALL: true
    steps:
      - checkout_and_fetch
      - run:
          name: 'Update NPM and Install dependencies'
          command: sudo npm install -g npm@6
      - run:
          name: 'Install dependencies'
          command: npm ci
      - save_cache:
          key: node-module-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/usr/local/lib/node_modules
            - node_modules
      - run:
          name: 'Save NPM install log'
          command: npm ls --json > /tmp/npm_install.log || true
      - store_artifacts:
          path: /tmp/npm_install.log
          destination: npm-install

  build:
    executor: main-executor
    environment:
      NODE_ENV: 'test'
    steps:
      - checkout_and_fetch
      - restore_node_modules
      - run:
          name: 'Build all packages'
          command: npm run build
      - persist_to_workspace:
          root: ~/webex-js-sdk
          paths:
            - packages/node_modules

  static_analysis:
    executor: main-executor
    steps:
      - checkout_and_fetch
      - restore_node_modules
      - restore_built_packages
      - run:
          name: 'Run ESLint'
          command: npm run lint:ci
      - store_test_results:
          path: reports/style
      - store_artifacts:
          path: reports/style
          destination: style

  unit_tests:
    executor: main-executor
    environment:
      COVERAGE: true
    steps:
      - checkout_and_fetch
      - restore_node_modules
      - restore_built_packages
      - skip_check
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-${CIRCLE_PR_USERNAME}-${CIRCLE_PR_REPONAME}-${CIRCLE_PR_NUMBER}_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      - run:
          name: 'Test modified packages'
          command: npm run test:github
      - run:
          name: 'Check if any unit tests failed'
          command: |
            FAILURES=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*failures=\"\([^\"]*\).*/\1/p' | xargs)
            ERRORS=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*errors=\"\([^\"]*\).*/\1/p' | xargs)

            echo Failures $FAILURES
            echo Errors $ERRORS

            if [[ "$FAILURES" -ne *0* ]] || [[ "$ERRORS" -ne *0* ]]; then
              echo 'Unit tests failed'
              exit 1
            fi
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: reports/junit
          destination: junit

  samples:
    executor: main-executor
    environment:
      NODE_ENV: 'test'
      COVERAGE: true
    steps:
      - checkout_and_fetch
      - restore_node_modules
      - restore_built_packages
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-${CIRCLE_PR_USERNAME}-${CIRCLE_PR_REPONAME}-${CIRCLE_PR_NUMBER}_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      - run:
          name: 'Test samples'
          command: npm run samples:test
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: reports/junit/wdio
          destination: wdio
      - store_artifacts:
          path: reports/cobertura.xml
          destination: cobertura.xml
      - store_artifacts:
          path: /home/circleci/.npm/_logs/
          destination: npm-logs

  integration_tests:
    executor: main-executor
    environment:
      COVERAGE: true
    steps:
      - checkout_and_fetch
      - restore_node_modules
      - restore_built_packages
      - skip_check
      - jq/install
      - run:
          name: 'Check if PR is approved'
          command: |
            PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
            PR_APPROVAL_STATUS=$(curl -s https://api.github.com/repos/webex/webex-js-sdk/pulls/${PR_NUMBER}/reviews | jq ".[0].state")

            if [ "$PR_APPROVAL_STATUS" -ne "APPROVED" ]; then
              exit 1;
            fi;
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-${CIRCLE_PR_USERNAME}-${CIRCLE_PR_REPONAME}-${CIRCLE_PR_NUMBER}_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      - run:
          name: 'Run all integration tests on Mac and Windows version of Chrome and Firefox'
          command: npm run test -- --os Mac Windows --browsers Chrome Firefox
      - run:
          name: 'Check if any integration tests failed'
          command: |
            FAILURES=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*failures=\"\([^\"]*\).*/\1/p' | xargs)
            ERRORS=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*errors=\"\([^\"]*\).*/\1/p' | xargs)

            echo Failures $FAILURES
            echo Errors $ERRORS

            if [[ "$FAILURES" -ne *0* ]] || [[ "$ERRORS" -ne *0* ]]; then
              echo 'Unit tests failed'
              exit 1
            fi
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: reports/junit
          destination: junit

workflows:
  version: 2
  github_checks:
    jobs:
      - validate_config
      - npm_install:
          requires:
            - validate_config
      - build:
          requires:
            - npm_install
      - static_analysis:
          requires:
            - npm_install
      - unit_tests:
          requires:
            - build
            - static_analysis
      - samples:
          requires:
            - build
            - static_analysis
      - integration_tests:
          requires:
            - unit_tests
            - samples
