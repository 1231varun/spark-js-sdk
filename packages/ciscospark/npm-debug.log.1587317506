0 info it worked if it ends with ok
1 verbose cli [ '/Users/ian/.nvm/versions/node/v4.3.0/bin/node',
1 verbose cli   '/Users/ian/.nvm/versions/node/v4.3.0/bin/npm',
1 verbose cli   'publish',
1 verbose cli   '--tag',
1 verbose cli   'lerna-temp' ]
2 info using npm@2.15.9
3 info using node@v4.3.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/ian/projects/cisco/spark-js-sdk/spark-js-sdk/packages/ciscospark',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/ian/.npm/ciscospark/0.6.9/package.tgz not in flight; packing
9 verbose correctMkdir /Users/ian/.npm correctMkdir not in flight; initializing
10 verbose tar pack [ '/Users/ian/.npm/ciscospark/0.6.9/package.tgz',
10 verbose tar pack   '/Users/ian/projects/cisco/spark-js-sdk/spark-js-sdk/packages/ciscospark' ]
11 verbose tarball /Users/ian/.npm/ciscospark/0.6.9/package.tgz
12 verbose folder /Users/ian/projects/cisco/spark-js-sdk/spark-js-sdk/packages/ciscospark
13 info prepublish ciscospark@0.6.9
14 verbose addLocalTarball adding from inside cache /Users/ian/.npm/ciscospark/0.6.9/package.tgz
15 verbose correctMkdir /Users/ian/.npm correctMkdir not in flight; initializing
16 silly cache afterAdd ciscospark@0.6.9
17 verbose afterAdd /Users/ian/.npm/ciscospark/0.6.9/package/package.json not in flight; writing
18 verbose correctMkdir /Users/ian/.npm correctMkdir not in flight; initializing
19 verbose afterAdd /Users/ian/.npm/ciscospark/0.6.9/package/package.json written
20 silly publish { name: 'ciscospark',
20 silly publish   version: '0.6.9',
20 silly publish   description: 'SDK for Cisco Spark',
20 silly publish   main: 'es5.js',
20 silly publish   devMain: 'src/index.js',
20 silly publish   author: { name: 'Ian W. Remmel', email: 'iremmel@cisco.com' },
20 silly publish   license: '(Apache-2.0)',
20 silly publish   dependencies:
20 silly publish    { '@ciscospark/common': '^0.6.9',
20 silly publish      '@ciscospark/http-core': '^0.6.9',
20 silly publish      '@ciscospark/plugin-phone': '^0.6.9',
20 silly publish      '@ciscospark/spark-core': '^0.6.9',
20 silly publish      'babel-polyfill': '^6.6.1',
20 silly publish      'babel-runtime': '^6.3.19',
20 silly publish      envify: '^3.4.0',
20 silly publish      lodash: '^4.5.1' },
20 silly publish   devDependencies:
20 silly publish    { '@ciscospark/test-helper-chai': '^0.6.0',
20 silly publish      '@ciscospark/test-helper-mocha': '^0.6.0',
20 silly publish      '@ciscospark/test-helper-sinon': '^0.6.0',
20 silly publish      '@ciscospark/test-helper-test-users': '^0.6.9',
20 silly publish      'babel-eslint': '^6.0.0-beta.5',
20 silly publish      'babel-plugin-lodash': '2.1.0',
20 silly publish      'babel-register': '^6.4.3',
20 silly publish      eslint: '2.2.0',
20 silly publish      'eslint-plugin-mocha-only': '0.0.3' },
20 silly publish   browserify: { transform: [ 'envify' ] },
20 silly publish   readme: '# CiscoSpark\n\n**Extends SparkCore**\n\nSDK for Cisco Spark\n\n## Installation\n\n```javascript\nnpm install --save ciscospark\n```\n\n## A Note on Browsers\n\nCiscospark is fully browser compatible but we don\'t distribute a browserified\nbundle at this time; you\'ll need to build the bundle yourself. We use\n[browserify](http://browserify.org/) internally and\n[webpack](https://webpack.github.io/) should work as well.\n\n## Getting Started\n\nThe quickest way to get started is to set your access token as an environment\nvariable:\n\n```javascript\n\n```\n\n### Refresh Tokens\n\nFor long-running use cases, you\'ll need to provide a refresh token, client\nid, and client secret:\n\n```javascript\nTODO\n```\n\n## Runtime Configuration\n\nWhile environment variables are handy for development, they don\'t really help\nyou write an app for lots of users. You can pass credentials to the spark\nusing init.\n\n```javascript\nTODO\n```\n\n## OAuth\n\nOAuth is baked right into spark so you don\'t need to figure it out.\n\nTo kick off an OAuth login, simply call `spark.authenticate()` which will\ndirect the current app to our login page.\n\n```javascript\nTODO\n```\n\nTo refresh an access token, call `spark.authorize()`. (Note: this should\ngenerally happen for you automatically).\n\n```javascript\nTODO\n```\n\n## init\n\nWhile environment variables are handy for development, they don\'t really help\nyou write an app for lots of users. You can pass credentials to the spark\nusing init.\n\n**Parameters**\n\n-   `attrs` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n    -   `attrs.credentials` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n\nReturns **[CiscoSpark](#ciscospark)** \n\n# Page\n\n## items\n\n## length\n\n## constructor\n\n**Parameters**\n\n-   `res` **HttpResponse** \n-   `spark` **ProxySpark** \n\nReturns **[Page](#page)** \n\n## next\n\nGet next page\n\nReturns **[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** \n\n## hasNext\n\nIndicates if there\'s another page\n\nReturns **[Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** \n\n## previous\n\nGet previous page\n\nReturns **[Page](#page)** \n\n## hasPrevious\n\nIndicates if there is a previous Page\n\nReturns **[Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** \n\n## iterator\n\nIterator\n\nReturns **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n\n# Types~Membership\n\n**Properties**\n\n-   `id` **uuid** Unique identifier for the membership\n-   `roomId` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The room ID\n-   `personId` **uuid** The person ID\n-   `personEmail` **email** The email address of the person / room member\n-   `isModerator` **[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Indicates whether the specified person should be a room moderator.\n-   `isMonitor` **[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Indicates whether the specified member is a room monitor.\n-   `created` **isoDate** The date and time that this membership was created.\n\n# Memberships\n\n**Extends SparkPlugin**\n\n## create\n\nAdds a person to a room. The person can be added by ID (personId) or by\nEmail Address (personEmail). The person can be optionally added to the room\nas a moderator.\n\n**Parameters**\n\n-   `membership` **[Types~Membership](#typesmembership)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nciscospark.rooms.create({title: \'Create Membership Example\'})\n  .then(function(room) {\n    return ciscospark.memberships.create({\n     personEmail: \'alice@example.com\',\n     roomId: room.id\n   });\n  })\n  .then(function(membership) {\n    var assert = require(\'assert\');\n    assert(membership.id);\n    assert(membership.roomId);\n    assert(membership.personId);\n    assert(membership.personEmail);\n    assert(\'isModerator\' in membership);\n    assert(\'isMonitor\' in membership);\n    assert(membership.created);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Membership](#typesmembership)>** \n\n## get\n\nReturns a single membership.\n\n**Parameters**\n\n-   `membership` **([Types~Membership](#typesmembership) | uuid)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar membership;\nciscospark.rooms.create({title: \'Get Membership Example\'})\n  .then(function(room) {\n    return ciscospark.memberships.create({\n      personEmail: \'alice@example.com\',\n      roomId: room.id\n    });\n  })\n  .then(function(m) {\n    membership = m;\n    return ciscospark.memberships.get(m.id);\n  })\n  .then(function(m) {\n    var assert = require(\'assert\');\n    assert.deepEqual(m, membership);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Membership](#typesmembership)>** \n\n## list\n\nReturns a list of memberships. In most cases the results will only contain\nrooms that the authentiated user is a member of. You can filter the results\nby room to list people in a room or by person to find rooms that a\nspecific person is a member of.\n\n**Parameters**\n\n-   `options` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n    -   `options.personId` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** \n    -   `options.personEmail` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** \n    -   `options.roomId` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** \n    -   `options.max` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar room;\nciscospark.rooms.create({title: \'List Membership Example\'})\n  .then(function(r) {\n    room = r;\n    return ciscospark.memberships.create({\n     personEmail: \'alice@example.com\',\n     roomId: room.id\n    });\n  })\n  .then(function() {\n    return ciscospark.memberships.list({roomId: room.id});\n  })\n  .then(function(memberships) {\n    var assert = require(\'assert\');\n    assert.equal(memberships.length, 2);\n    for (var i = 0; i < memberships.length; i++) {\n      assert.equal(memberships.items[i].roomId, room.id);\n    }\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Page](#page)&lt;[Types~Membership](#typesmembership)>>** \n\n## remove\n\nDeletes a single membership.\n\n**Parameters**\n\n-   `membership` **([Types~Membership](#typesmembership) | uuid)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar membership, room;\nciscospark.rooms.create({title: \'Remove Membership Example\'})\n  .then(function(r) {\n    room = r;\n    return ciscospark.memberships.create({\n     personEmail: \'alice@example.com\',\n     roomId: room.id\n    });\n  })\n  .then(function(m) {\n    membership = m;\n    return ciscospark.memberships.list({roomId: room.id});\n  })\n  .then(function(memberships) {\n    var assert = require(\'assert\');\n    assert.equal(memberships.length, 2);\n    return ciscospark.memberships.remove(membership);\n  })\n  .then(function() {\n    return ciscospark.memberships.list({roomId: room.id});\n  })\n  .then(function(memberships) {\n    var assert = require(\'assert\');\n    assert.equal(memberships.length, 1);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)** \n\n## update\n\nUsed to update a single membership\'s properties\n\n**Parameters**\n\n-   `membership` **([Types~Membership](#typesmembership) | uuid)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar membership, room;\nciscospark.rooms.create({title: \'Memberships Example\'})\n  .then(function(r) {\n    room = r;\n    return ciscospark.memberships.list({roomId: room.id});\n  })\n  .then(function(memberships) {\n    membership = memberships.items[0];\n    var assert = require(\'assert\');\n    assert.equal(membership.isModerator, false);\n    membership.isModerator = true;\n    return ciscospark.memberships.update(membership);\n  })\n  .then(function() {\n    return ciscospark.memberships.get(membership.id);\n  })\n  .then(function(membership) {\n    var assert = require(\'assert\');\n    assert.equal(membership.isModerator, true);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Membership](#typesmembership)>** \n\n# Messages\n\n**Extends SparkPlugin**\n\nMessages are how people communicate in rooms. Each message timestamped and\nrepresented in Spark as a distinct block of content. Messages can contain\nplain text and a single file attachment. See the\n[Attachments Guide](Message) for a list of supported media types.\n\n## create\n\nPost a new message and/or media content into a room.\n\n**Parameters**\n\n-   `message` **[Types~Message](#typesmessage)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nciscospark.rooms.create({title: \'Create Message Example\'})\n  .then(function(room) {\n    return ciscospark.messages.create({\n      text: \'Howdy!\',\n      roomId: room.id\n    });\n  })\n  .then(function(message) {\n    var assert = require(\'assert\');\n    assert(message.id);\n    assert(message.personId);\n    assert(message.personEmail);\n    assert(message.roomId);\n    assert(message.created);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Message](#typesmessage)>** \n\n## get\n\nReturns a single message.\n\n**Parameters**\n\n-   `message` **([Types~Room](#typesroom) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar message;\nciscospark.rooms.create({title: \'Get Message Example\'})\n  .then(function(room) {\n    return ciscospark.messages.create({\n      text: \'Howdy!\',\n      roomId: room.id\n    });\n  })\n  .then(function(m) {\n    message = m;\n    return ciscospark.messages.get(message.id);\n  })\n  .then(function(message2) {\n    var assert = require(\'assert\');\n    assert.deepEqual(message2, message);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Message](#typesmessage)>** \n\n## list\n\nReturns a list of messages. In most cases the results will only contain\nmessages posted in rooms that the authentiated user is a member of.\n\n**Parameters**\n\n-   `options` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n    -   `options.roomId` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** \n    -   `options.max` **[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar message1, message2, room;\nciscospark.rooms.create({title: \'List Messages Example\'})\n  .then(function(r) {\n    room = r;\n    return ciscospark.messages.create({\n      text: \'Howdy!\',\n      roomId: room.id\n    });\n  })\n  .then(function(m) {\n    message1 = m;\n    return ciscospark.messages.create({\n      text: \'How are you?\',\n      roomId: room.id\n    });\n  })\n  .then(function(m) {\n    message2 = m;\n    return ciscospark.messages.list({roomId: room.id});\n  })\n  .then(function(messages) {\n    var assert = require(\'assert\');\n    assert.equal(messages.length, 2);\n    assert.equal(messages.items[0].id, message2.id);\n    assert.equal(messages.items[1].id, message1.id);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Page](#page)&lt;[Types~Message](#typesmessage)>>** \n\n## remove\n\nDeletes a single message. Deleting a message will notify all members of the\nroom that the authenticated user deleted the message. Generally, users can\nonly delete their own messages except for the case of Moderated Rooms and\nOrg Administrators.\n\n**Parameters**\n\n-   `message` **([Types~Message](#typesmessage) | uuid)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar message1, room;\nciscospark.rooms.create({title: \'Messages Example\'})\n  .then(function(r) {\n    room = r;\n    return ciscospark.messages.create({\n      text: \'Howdy!\',\n      roomId: room.id\n    });\n  })\n  .then(function(m) {\n    message1 = m;\n    return ciscospark.messages.create({\n      text: \'How are you?\',\n      roomId: room.id\n    });\n  })\n  .then(function() {\n    return ciscospark.messages.remove(message1);\n  })\n  .then(function() {\n    return ciscospark.messages.list({roomId: room.id});\n  })\n  .then(function(messages) {\n    var assert = require(\'assert\');\n    assert.equal(messages.items.length, 1);\n    assert(messages.items[0].id !== message1.id);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)** }\n\n# Types~Message\n\n**Properties**\n\n-   `id` **uuid** (server generated) Unique identifier for the message\n-   `personId` **uuid** The ID for the author of the messasge\n-   `personEmail` **email** The email for the author of the messasge\n-   `roomId` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The message posted to the room in plain text\n-   `created` **isoDate** (server generated)The source URLs for the\n    message attachment. See the {@link Content & Attachments{ Guide for a list of\n    supported media types.\n\n# People\n\n**Extends SparkPlugin**\n\n## get\n\nReturns a single person by ID\n\n**Parameters**\n\n-   `person` **([Types~Person](#typesperson) | uuid)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nciscospark.rooms.create({title: \'Get Person Example\'})\n  .then(function(room) {\n    return ciscospark.memberships.create({\n      personEmail: \'alice@example.com\',\n      roomId: room.id\n    });\n  })\n  .then(function(membership) {\n    return ciscospark.people.get(membership.personId);\n  })\n  .then(function(alice) {\n    var assert = require(\'assert\');\n    assert(alice.id);\n    assert(Array.isArray(alice.emails));\n    assert.equal(alice.emails.filter(function(email) {\n      return email === \'alice@example.com\';\n    }).length, 1);\n    assert(alice.displayName);\n    assert(alice.created);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Person](#typesperson)>** \n\n## list\n\nReturns a list of people\n\n**Parameters**\n\n-   `options` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n    -   `options.email` **email** Returns people with an email that contains this string\n    -   `options.name` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Returns people with a name that contains this string\n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar room;\nciscospark.rooms.create({title: \'List People Example\'})\n  .then(function(r) {\n    room = r;\n    return ciscospark.memberships.create({\n      personEmail: \'alice@example.com\',\n      roomId: room.id\n    });\n  })\n  .then(function() {\n    return ciscospark.memberships.create({\n      personEmail: \'bob@example.com\',\n      roomId: room.id\n    });\n  })\n  .then(function() {\n    return ciscospark.people.list({email: \'alice@example.com\'});\n  })\n  .then(function(people) {\n    var assert = require(\'assert\');\n    assert.equal(people.length, 1);\n    var person = people.items[0];\n    assert(person.id);\n    assert(Array.isArray(person.emails));\n    assert(person.displayName);\n    assert(person.created);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Page](#page)&lt;[Types~Person](#typesperson)>>** \n\n# Types~Person\n\n**Properties**\n\n-   `id` **uuid** Unique identifier for the person\n-   `emails` **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;email>** Email addresses of the person\n-   `displayName` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Display name of the person\n-   `created` **isoDate** The date and time that the person was created\n\n# Rooms\n\n**Extends SparkPlugin**\n\nRooms are virtual meeting places for getting stuff done. This resource\nrepresents the room itself. Check out the Memberships API to learn how to add\nand remove people from rooms and the Messages API for posting and managing\ncontent.\n\n## create\n\nCreates a new room. The authenticated user is automatically added as a\nmember of the room. See the @{link Memberships} to learn how to add more\npeople to the room.\n[Membership](Membership)\n\n**Parameters**\n\n-   `room` **[Types~Room](#typesroom)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nciscospark.rooms.create({title: \'Create Room Example\'})\n  .then(function(room) {\n    var assert = require(\'assert\')\n    assert(typeof room.created === \'string\');\n    assert(typeof room.id === \'string\');\n    assert(room.title === \'Create Room Example\');\n    console.log(room.title);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Room](#typesroom)>** \n\n## get\n\nReturns a single room.\n\n**Parameters**\n\n-   `room` **([Types~Room](#typesroom) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))** \n-   `options` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar room;\nciscospark.rooms.create({title: \'Get Room Example\'})\n  .then(function(r) {\n    room = r\n    return ciscospark.rooms.get(room.id)\n  })\n  .then(function(r) {\n    var assert = require(\'assert\');\n    assert.deepEqual(r, room);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Room](#typesroom)>** \n\n## list\n\nReturns a list of rooms. In most cases the results will only contain rooms\nthat the authentiated user is a member of.\n\n**Parameters**\n\n-   `options` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n    -   `options.max` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** Limit the maximum number of rooms in the\n        response.\n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar createdRooms;\nPromise.all([\n  ciscospark.rooms.create({title: \'List Rooms Example 1\'}),\n  ciscospark.rooms.create({title: \'List Rooms Example 2\'}),\n  ciscospark.rooms.create({title: \'List Rooms Example 3\'})\n])\n  .then(function(r) {\n    createdRooms = r;\n    return ciscospark.rooms.list({max: 3})\n      .then(function(rooms) {\n        var assert = require(\'assert\');\n        assert(rooms.length === 3);\n        for (var i = 0; i < rooms.items.length; i++) {\n          assert(createdRooms.filter(function(room) {\n            return room.id === rooms.items[i].id;\n          }).length === 1);\n        }\n        return \'success\';\n      });\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Page](#page)&lt;[Types~Room](#typesroom)>>** \n\n## remove\n\nDeletes a single room.\n\n**Parameters**\n\n-   `room` **([Types~Room](#typesroom) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar room;\nciscospark.rooms.create({title: \'Remove Room Example\'})\n .then(function(r) {\n   room = r;\n   return ciscospark.rooms.remove(room.id);\n })\n .then(function() {\n   return ciscospark.rooms.get(room.id);\n })\n .then(function() {\n   var assert = require(\'assert\');\n   assert(false, \'the previous get should have failed\');\n })\n .catch(function(reason) {\n   var assert = require(\'assert\');\n   assert.equal(reason.statusCode, 404);\n   return \'success\'\n });\n // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)** \n\n## update\n\nUsed to update a single room\'s properties.\n\n**Parameters**\n\n-   `room` **[Types~Room](#typesroom)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar room;\nciscospark.rooms.create({title: \'Update Room Example\'})\n  .then(function(r) {\n    room = r;\n    room.title = \'Update Room Example (Updated Title)\';\n    return ciscospark.rooms.update(room);\n  })\n  .then(function() {\n    return ciscospark.rooms.get(room.id);\n  })\n  .then(function(room) {\n   var assert = require(\'assert\');\n    assert.equal(room.title, \'Update Room Example (Updated Title)\');\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Room](#typesroom)>** \n\n# Types~Room\n\n**Properties**\n\n-   `id` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** (server generated) Unique identifier for the room\n-   `title` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The display name for the room. All room members\n    will see the title so make it something good\n-   `created` **isoDate** (server generated) The date and time that the\n    room was created\n-   `teamId` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** (optional): The id of the team to which the room\n    belongs\n\n# Types~Team\n\n**Properties**\n\n-   `id` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** (server generated) The unique ID for the team.\n-   `name` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The name of the team.\n-   `created` **isoDate** (server generated) The date and time when the\n    team was created, in ISO8601 format.\n\n# Teams\n\n**Extends SparkPlugin**\n\n## create\n\nCreate a new team.\n\n**Parameters**\n\n-   `team` **[Types~Team](#typesteam)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nciscospark.teams.create({name: \'Create Team Example\'})\n  .then(function(team) {\n    var assert = require(\'assert\');\n    assert(team.id);\n    assert(team.name);\n    assert(team.created);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Team](#typesteam)>** \n\n## get\n\nReturns a single team\n\n**Parameters**\n\n-   `team` **([Types~Team](#typesteam) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))** \n-   `options` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar team;\nciscospark.teams.create({name: \'Get Team Example\'})\n  .then(function(r) {\n    team = r;\n    return ciscospark.teams.get(team.id);\n  })\n  .then(function(team2) {\n    var assert = require(\'assert\');\n    assert.equal(team2.id, team.id);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Team](#typesteam)>** \n\n## list\n\nList teams.\n\n**Parameters**\n\n-   `options` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n    -   `options.max` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** Limit the maximum number of teams in the\n        response.\n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar createdRooms;\nPromise.all([\n  ciscospark.teams.create({name: \'List Teams Example 1\'}),\n  ciscospark.teams.create({name: \'List Teams Example 2\'}),\n  ciscospark.teams.create({name: \'List Teams Example 3\'})\n])\n  .then(function(r) {\n    createdRooms = r;\n    return ciscospark.teams.list({max: 3});\n  })\n  .then(function(teams) {\n    var assert = require(\'assert\');\n    assert(teams.length === 3);\n    for (var i = 0; i < teams.items.length; i++) {\n      assert(createdRooms.filter(function(room) {\n        return room.id === teams.items[i].id;\n      }).length === 1);\n    }\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Page](#page)&lt;[Types~Team](#typesteam)>>** \n\n## update\n\nUpdate a team.\n\n**Parameters**\n\n-   `team` **[Types~Team](#typesteam)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar teams;\nciscospark.teams.create({name: \'Update Team Example\'})\n  .then(function(r) {\n    teams = r;\n    teams.name = \'Teams Example (Updated Title)\';\n    return ciscospark.teams.update(teams);\n  })\n  .then(function() {\n    return ciscospark.teams.get(teams.id);\n  })\n  .then(function(teams) {\n    var assert = require(\'assert\');\n    assert.equal(teams.name, \'Teams Example (Updated Title)\');\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~Team](#typesteam)>** \n\n# TeamMemberships\n\n**Extends SparkPlugin**\n\nTeam Memberships represent a person\'s relationship to a team. Use this API to\nlist members of any team that you\'re in or create memberships to invite\nsomeone to a team. Team memberships can also be updated to make someome a\nmoderator or deleted to remove them from the team.\n\nJust like in the Spark app, you must be a member of the team in order to list\nits memberships or invite people.\n\n## create\n\nAdd someone to a team by Person ID or email address; optionally making them\na moderator.\n\n**Parameters**\n\n-   `membership` **[Types~TeamMembership](#typesteammembership)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nciscospark.teams.create({name: \'Create Team Membership Example\'})\n  .then(function(team) {\n    return ciscospark.teamMemberships.create({\n     personEmail: \'alice@example.com\',\n     teamId: team.id\n   });\n  })\n  .then(function(membership) {\n    var assert = require(\'assert\');\n    assert(membership.id);\n    assert(membership.teamId);\n    assert(membership.personId);\n    assert(membership.personEmail);\n    assert(\'isModerator\' in membership);\n    assert(membership.created);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~TeamMembership](#typesteammembership)>** \n\n## get\n\nGet details for a membership by ID.\n\n**Parameters**\n\n-   `membership` **([Types~TeamMembership](#typesteammembership) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar membership;\nciscospark.teams.create({name: \'Get Team Memberships Example\'})\n  .then(function(team) {\n    return ciscospark.teamMemberships.create({\n      personEmail: \'alice@example.com\',\n      teamId: team.id\n    });\n  })\n  .then(function(m) {\n    membership = m;\n    return ciscospark.teamMemberships.get(m.id);\n  })\n  .then(function(m) {\n    var assert = require(\'assert\');\n    assert.deepEqual(m, membership);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~TeamMembership](#typesteammembership)>** \n\n## list\n\nLists all team memberships. By default, lists memberships for teams to\nwhich the authenticated user belongs.\n\n**Parameters**\n\n-   `options` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n    -   `options.max` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar team;\nciscospark.teams.create({name: \'List Team Memberships Example\'})\n  .then(function(t) {\n    team = t;\n    return ciscospark.teamMemberships.create({\n     personEmail: \'alice@example.com\',\n     teamId: team.id\n    });\n  })\n  .then(function() {\n    return ciscospark.teamMemberships.list({teamId: team.id});\n  })\n  .then(function(teamMemberships) {\n    var assert = require(\'assert\');\n    assert.equal(teamMemberships.length, 2);\n    for (var i = 0; i < teamMemberships.length; i++) {\n      assert.equal(teamMemberships.items[i].teamId, team.id);\n    }\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **\\[type]** \n\n## remove\n\nDeletes a membership by ID.\n\n**Parameters**\n\n-   `membership` **([Types~TeamMembership](#typesteammembership) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar membership, team;\nciscospark.teams.create({name: \'Remove Team Memberships Example\'})\n  .then(function(t) {\n    team = t;\n    return ciscospark.teamMemberships.create({\n     personEmail: \'alice@example.com\',\n     teamId: team.id\n    });\n  })\n  .then(function(m) {\n    membership = m;\n    return ciscospark.teamMemberships.list({teamId: team.id});\n  })\n  .then(function(teamMemberships) {\n    var assert = require(\'assert\');\n    assert.equal(teamMemberships.length, 2);\n    return ciscospark.teamMemberships.remove(membership);\n  })\n  .then(function() {\n    return ciscospark.teamMemberships.list({teamId: team.id});\n  })\n  .then(function(teamMemberships) {\n    var assert = require(\'assert\');\n    assert.equal(teamMemberships.length, 1);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)** \n\n## update\n\nUpdates properties for a membership.\n\n**Parameters**\n\n-   `membership` **[Types~TeamMembership](#typesteammembership)** \n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Types~TeamMembership](#typesteammembership)>** \n\n# Types~TeamMembership\n\n**Properties**\n\n-   `id` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** (server generated) The team ID\n-   `personId` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The person ID\n-   `personEmail` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The email address of the person\n-   `isModerator` **[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Set to `true` to make the person a team\n    moderator\n\n# Types~Webhook\n\n**Properties**\n\n-   `id` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The unique ID for the webhook.\n-   `resource` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The resource type for the webhook.\n-   `event` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The event type for the webhook.\n-   `filter` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The filter that defines the webhook scope.\n-   `targetUrl` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** The URL that receives POST requests for each event.\n-   `name` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** A user-friendly name for this webhook.\n\n# Webhooks\n\n**Extends SparkPlugin**\n\nA webhook notifies an application when an event for which the application is\nregistered has occurred.\n\n## create\n\nPosts a webhook.\n\n**Parameters**\n\n-   `webhook` **[Types~Webhook](#typeswebhook)** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nciscospark.rooms.create({title: \'Create Webhook Example\'})\n  .then(function(room) {\n    return ciscospark.webhooks.create({\n      resource: \'messages\',\n      event: \'created\',\n      filter: \'roomId=\' + room.id,\n      targetUrl: \'https://example.com/webhook\',\n      name: \'Test Webhook\'\n    });\n  })\n  .then(function(webhook) {\n    var assert = require(\'assert\');\n    assert(webhook.id);\n    assert(webhook.resource);\n    assert(webhook.event);\n    assert(webhook.filter);\n    assert(webhook.targetUrl);\n    assert(webhook.name);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;Webhook>** \n\n## get\n\nShows details for a webhook.\n\n**Parameters**\n\n-   `webhook` **(Webhook | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar webhook;\nciscospark.rooms.create({title: \'Get Webhook Example\'})\n  .then(function(room) {\n    return ciscospark.webhooks.create({\n      resource: \'messages\',\n      event: \'created\',\n      filter: \'roomId=\' + room.id,\n      targetUrl: \'https://example.com/webhook\',\n      name: \'Test Webhook\'\n    });\n  })\n  .then(function(w) {\n    webhook = w;\n    return ciscospark.webhooks.get(webhook.id);\n  })\n  .then(function(webhook2) {\n    var assert = require(\'assert\');\n    assert.deepEqual(webhook2, webhook);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;Webhook>>** \n\n## list\n\nLists all webhooks.\n\n**Parameters**\n\n-   `options` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n    -   `options.max` **integer** Limit the maximum number of webhooks in the response.\n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar room, webhook;\nciscospark.rooms.create({title: \'List Webhooks Example\'})\n  .then(function(r) {\n    room = r;\n    return ciscospark.webhooks.create({\n      resource: \'messages\',\n      event: \'created\',\n      filter: \'roomId=\' + room.id,\n      targetUrl: \'https://example.com/webhook\',\n      name: \'Test Webhook\'\n    });\n  })\n  .then(function(w) {\n    webhook = w;\n    return ciscospark.webhooks.list();\n  })\n  .then(function(webhooks) {\n    var assert = require(\'assert\');\n    assert.equal(webhooks.items.filter(function(w) {\n      return w.id === webhook.id;\n    }).length, 1);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;Webhook>** \n\n## remove\n\nDelete a webhook.\n\n**Parameters**\n\n-   `webhook` **(Webhook | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar room, webhook;\nciscospark.rooms.create({title: \'Remove Webhook Example\'})\n  .then(function(r) {\n    room = r;\n    return ciscospark.webhooks.create({\n      resource: \'messages\',\n      event: \'created\',\n      filter: \'roomId=\' + room.id,\n      targetUrl: \'https://example.com/webhook\',\n      name: \'Test Webhook\'\n    });\n  })\n  .then(function(w) {\n    webhook = w;\n    return ciscospark.webhooks.remove(webhook);\n  })\n  .then(function() {\n    return ciscospark.webhooks.list();\n  })\n  .then(function(webhooks) {\n    var assert = require(\'assert\');\n    assert.equal(webhooks.items.filter(function(w) {\n      return w.id === webhook.id;\n    }).length, 0);\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)** \n\n## update\n\nUpdate a webhook.\n\n**Parameters**\n\n-   `webhook` **Webhook** \n\n**Examples**\n\n```javascript\nvar ciscospark = require(\'../..\');\nvar webhook;\nciscospark.rooms.create({title: \'Webhook Example\'})\n  .then(function(room) {\n    return ciscospark.webhooks.create({\n      resource: \'messages\',\n      event: \'created\',\n      filter: \'roomId=\' + room.id,\n      targetUrl: \'https://example.com/webhook\',\n      name: \'Test Webhook\'\n    });\n  })\n  .then(function(w) {\n    webhook = w;\n    webhook.targetUrl = \'https://example.com/webhook/newtarget\';\n    return ciscospark.webhooks.update(webhook);\n  })\n  .then(function() {\n    return ciscospark.webhooks.get(webhook);\n  })\n  .then(function(webhook) {\n    var assert = require(\'assert\');\n    assert.equal(webhook.targetUrl, \'https://example.com/webhook/newtarget\');\n    return \'success\';\n  });\n  // => success\n```\n\nReturns **[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;Webhook>** \n',
20 silly publish   readmeFilename: 'README.md',
20 silly publish   _id: 'ciscospark@0.6.9',
20 silly publish   scripts: {},
20 silly publish   _shasum: '0d91bbecdcdb236caf05985350dd32393f7caefe',
20 silly publish   _from: '.' }
21 verbose getPublishConfig undefined
22 silly mapToRegistry name ciscospark
23 silly mapToRegistry using default registry
24 silly mapToRegistry registry https://registry.npmjs.org/
25 silly mapToRegistry data Result {
25 silly mapToRegistry   raw: 'ciscospark',
25 silly mapToRegistry   scope: null,
25 silly mapToRegistry   name: 'ciscospark',
25 silly mapToRegistry   rawSpec: '',
25 silly mapToRegistry   spec: 'latest',
25 silly mapToRegistry   type: 'tag' }
26 silly mapToRegistry uri https://registry.npmjs.org/ciscospark
27 verbose publish registryBase https://registry.npmjs.org/
28 silly publish uploading /Users/ian/.npm/ciscospark/0.6.9/package.tgz
29 verbose request uri https://registry.npmjs.org/ciscospark
30 verbose request sending authorization for write operation
31 info attempt registry request try #1 at 3:11:26 PM
32 verbose request using bearer token for auth
33 verbose request id 769794ba43514a26
34 http request PUT https://registry.npmjs.org/ciscospark
35 http 200 https://registry.npmjs.org/ciscospark
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'content-encoding': 'gzip',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'transfer-encoding': 'chunked',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Thu, 21 Jul 2016 22:11:30 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-sjc3125-SJC',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1469139086.555534,VS0,VE4368',
36 verbose headers   vary: 'Accept-Encoding' }
37 verbose request invalidating /Users/ian/.npm/registry.npmjs.org/ciscospark on PUT
38 info publish ciscospark@0.6.9
39 verbose stack Error: write EPIPE
39 verbose stack     at Object.exports._errnoException (util.js:870:11)
39 verbose stack     at exports._exceptionWithHostPort (util.js:893:20)
39 verbose stack     at WriteWrap.afterWrite (net.js:763:14)
40 verbose cwd /Users/ian/projects/cisco/spark-js-sdk/spark-js-sdk/packages/ciscospark
41 error Darwin 15.5.0
42 error argv "/Users/ian/.nvm/versions/node/v4.3.0/bin/node" "/Users/ian/.nvm/versions/node/v4.3.0/bin/npm" "publish" "--tag" "lerna-temp"
43 error node v4.3.0
44 error npm  v2.15.9
45 error code EPIPE
46 error errno EPIPE
47 error syscall write
48 error write EPIPE
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
