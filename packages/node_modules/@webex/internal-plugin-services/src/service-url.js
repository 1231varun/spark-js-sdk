import Url from 'url';

import AmpState from 'ampersand-state';

/* eslint-disable no-underscore-dangle */
/**
 * @class
 */
const ServiceUrl = AmpState.extend({
  namespace: 'ServiceUrl',

  props: {
    defaultUrl: ['string', true, undefined],
    hosts: ['array', false, () => ([])],
    name: ['string', true, undefined]
  },

  /**
   * Generate a host url based on the host
   * uri provided.
   * @param {string} hostUri
   * @returns {string}
   */
  _generateHostUrl(hostUri) {
    const url = Url.parse(this.defaultUrl);

    url.host = hostUri;

    return Url.format(url);
  },

  /**
   * Generate a list of urls based on this
   * `ServiceUrl`'s known hosts.
   * @returns {string[]}
   */
  _getHostUrls() {
    return this.hosts.map((host) => ({
      url: this._generateHostUrl(host.host),
      priority: host.priority
    }));
  },

  /**
   * Get the current host url with the highest
   * priority.
   * @returns {string}
   */
  _getPriorityHostUrl() {
    if (this.hosts.length === 0) { return this.defaultUrl; }

    return this._generateHostUrl(this.hosts.reduce((o, c) => (
      o.priority < c.priority ? c : o
    )));
  },

  /**
   * Get the current url for the highest priority
   * host via host rendering. A later PR will update this
   * to pull from the priority url list.
   * @returns {string}
   */
  get() {
    return this.defaultUrl;
  }
});
/* eslint-enable no-underscore-dangle */

export default ServiceUrl;
