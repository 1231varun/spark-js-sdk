/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@webex/test-helper-chai';
// import {cloneDeep} from 'lodash';
import MockWebex from '@webex/test-helper-mock-webex';
import Services from '@webex/internal-plugin-services';

/* eslint-disable no-underscore-dangle */
describe('plugin-services', () => {
  describe('Service', () => {
    let webex;
    let services;

    let serviceList;
    let promise;

    beforeEach('initialize webex', () => {
      webex = new MockWebex({
        children: {
          services: Services
        }
      });
      services = webex.internal.services;
    });

    describe('#namespace', () => {
      it('is accurate to plugin name', () => {
        assert.equal(services.namespace, 'Services');
      });
    });

    describe('#status', () => {
      it('has all the required keys', () => {
        assert.hasAllKeys(services.status, ['ready']);
      });

      it('has valid key value types', () => {
        assert.typeOf(services.status.ready, 'boolean');
      });

      it('has valid key values', () => {
        assert.isNotTrue(services.status.ready);
      });
    });

    describe('#_serviceUrls', () => {
      it('must be of type array', () => {
        assert.typeOf(services._serviceUrls, 'array');
      });
    });

    describe('#services()', () => {
      beforeEach('get service list', () => {
        serviceList = services.services();
      });

      it('must return an object', () => {
        assert.typeOf(serviceList, 'object');
      });

      it('returned list must be of shape {Record<string, string>}', () => {
        Object.keys(serviceList).forEach((key) => {
          assert.typeOf(serviceList[key], 'string');
        });
      });
    });

    describe('#waitUntilReady()', () => {
      beforeEach('get return value', () => {
        promise = services.waitUntilReady();
      });

      it('returns a promise', () => {
        assert.typeOf(promise, 'promise');
      });

      it('doesn\'t resolve until services plugin is ready', () => {
        promise.then(() => {
          assert.equal(services.status.ready, true);
        });
      });

      it('returns a resolved promise if services is already ready', () => {
        promise.then(() => services.waitUntilReady).then(() => {
          assert.equal(services.status.ready, true);
        });
      });
    });
  });
});
/* eslint-enable no-underscore-dangle */
