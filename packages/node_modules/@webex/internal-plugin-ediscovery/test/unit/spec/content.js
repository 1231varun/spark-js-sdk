import EDiscovery from '@webex/internal-plugin-ediscovery';
import MockWebex from '@webex/test-helper-mock-webex';
import sinon from 'sinon';
import {assert, expect} from '@webex/test-helper-chai';

/* eslint-disable max-len */
describe('EDiscovery Content API Tests', () => {
  let webex;
  const url = 'https://ediscovery-test.wbx2.com/ediscovery';
  const uuid = 'cc06f622-46ab-45b9-b3a6-5d70bad1d70a';
  const defaultTimeout = 30000;

  beforeEach(() => {
    webex = new MockWebex({
      children: {
        ediscovery: EDiscovery
      }
    });
    webex.internal.device.getServiceUrl = sinon.stub().returns(Promise.resolve(url));
  });

  describe('GetContent Tests', () => {
    it('GetContent succeeds', async () => {
      // getContent calls getContentSummary internally, so we need to stub it here
      webex.internal.ediscovery.getContentSummary = sinon.stub().returns(Promise.resolve());
      const result = webex.internal.ediscovery.getContent(uuid, {offset: 0, size: 1})
        .then((res) => {
          expect(res.statusCode).equal(200);
        });

      return result;
    });

    it('GetContent fails with no params', async () => {
      const result = expect(webex.internal.ediscovery.getContent()).to.be.rejectedWith(Error, 'Undefined parameter');

      return result;
    });

    it('GetContent timeout defaults to 30s', async () => {
      webex.internal.ediscovery.getContentSummary = sinon.stub().returns(Promise.resolve());
      const result = webex.internal.ediscovery.getContent(uuid)
        .then(() => {
          sinon.assert.calledWith(webex.request, sinon.match.has('timeout', defaultTimeout));
        });

      return result;
    });

    it('GetContent timeout defaults to 30s when other options are specified', async () => {
      webex.internal.ediscovery.getContentSummary = sinon.stub().returns(Promise.resolve());
      const result = webex.internal.ediscovery.getContent(uuid, {offset: 0, size: 1})
        .then(() => {
          sinon.assert.calledWith(webex.request, sinon.match.has('timeout', defaultTimeout));
        });

      return result;
    });

    it('GetContent timeout can be overwritten to 5s with timeout as the only option', async () => {
      webex.internal.ediscovery.getContentSummary = sinon.stub().returns(Promise.resolve());
      const result = webex.internal.ediscovery.getContent(uuid, {timeoutMs: 5000})
        .then(() => {
          sinon.assert.calledWith(webex.request, sinon.match.has('timeout', 5000));
        });

      return result;
    });

    it('GetContent timeout can be overwritten to 5s when other options are specified', async () => {
      webex.internal.ediscovery.getContentSummary = sinon.stub().returns(Promise.resolve());
      const result = webex.internal.ediscovery.getContent(uuid, {offset: 0, size: 1, timeoutMs: 5000})
        .then(() => {
          sinon.assert.calledWith(webex.request, sinon.match.has('timeout', 5000));
          sinon.assert.calledWith(webex.request, sinon.match.has('qs', {offset: 0, size: 1}));
        });

      return result;
    });
  });

  describe('GetContentSummary Tests', () => {
    // The fact that the getContentSummary APIs return the response body object (which is a ContentSummary object)
    // rather than the entire response means we must take a different approach to verifying to verifying these tests.
    // If possible, this should be altered as part of SPARK-76030 to align with the other APIs

    // There is a gap in test coverage of getContentSummary here due to it's recursive nature,
    // which we plan to remove in order to align it with the getContent API, see SPARK-76030

    it('getContentSummary fails with no params', async () => {
      const result = webex.internal.ediscovery.getContentSummary()
        .catch((reason) => {
          // the @oneFlight annotation make it difficult to verify this test, as it is keyed off the reportId
          expect(reason.message).to.not.equal(undefined);
        });

      return result;
    });

    it('GetContentSummaryBySpaceId succeeds', async () => {
      const result = webex.internal.ediscovery.getContentSummaryBySpaceId(uuid, uuid)
        .then((res) => {
          expect(res).to.not.equal(undefined);
        });

      return result;
    });

    it('GetContentSummaryBySpaceId fails with no params', async () => {
      const result = expect(webex.internal.ediscovery.getContentSummaryBySpaceId()).to.be.rejectedWith(Error, 'Undefined parameter');

      return result;
    });

    it('GetContentSummaryBySpaceId initialises contentSummaryBySpaceIdCache if empty', async () => {
      webex.internal.ediscovery.contentSummaryBySpaceIdCache = {
        set: sinon.stub(),
        has: sinon.stub().returns(false)
      };
      const result = webex.internal.ediscovery.getContentSummaryBySpaceId(uuid, uuid)
        .then(() => {
          assert.called(webex.internal.ediscovery.contentSummaryBySpaceIdCache.has);
          assert.calledWith(webex.internal.ediscovery.contentSummaryBySpaceIdCache.set, uuid, new Map());
        });

      return result;
    });

    it('GetContentSummaryBySpaceId retrieves space from contentSummaryBySpaceIdCache if available', async () => {
      const mockCachedSpace = 'space';
      const spaceIdMap = {
        get: sinon.stub().withArgs(uuid).returns(mockCachedSpace),
        set: sinon.stub(),
        has: sinon.stub().returns(true)
      };

      webex.internal.ediscovery.contentSummaryBySpaceIdCache = {
        get: sinon.stub().withArgs(uuid).returns(spaceIdMap),
        set: sinon.stub(),
        has: sinon.stub().returns(true)
      };
      const result = webex.internal.ediscovery.getContentSummaryBySpaceId(uuid, uuid)
        .then((res) => {
          expect(res).to.equal(mockCachedSpace);
          assert.callCount(webex.internal.ediscovery.contentSummaryBySpaceIdCache.has, 1);
          assert.callCount(spaceIdMap.has, 1);
          assert.callCount(spaceIdMap.get, 1);
        });

      return result;
    });

    it('GetContentSummaryBySpaceId populates contentSummaryBySpaceIdCache with space when retrieved', async () => {
      const mockResponse = {body: {spaceId: uuid}};
      
      webex.internal.ediscovery.request = sinon.stub().resolves(mockResponse);

      const spaceIdMap = {
        set: sinon.stub(),
        has: sinon.stub().returns(false)
      };

      webex.internal.ediscovery.contentSummaryBySpaceIdCache = {
        get: sinon.stub().withArgs(uuid).returns(spaceIdMap),
        set: sinon.stub(),
        has: sinon.stub().returns(true)
      };
      const result = webex.internal.ediscovery.getContentSummaryBySpaceId(uuid, uuid)
        .then((res) => {
          expect(res).to.equal(mockResponse.body);
          assert.callCount(webex.internal.ediscovery.contentSummaryBySpaceIdCache.has, 2);
          assert.callCount(spaceIdMap.has, 1);
          assert.calledWith(spaceIdMap.set, mockResponse.body.spaceId, mockResponse.body);
        });

      return result;
    });
  });
});
