import {assert, expect} from '@ciscospark/test-helper-chai';
import {skipInNode} from '@ciscospark/test-helper-mocha';
import {ReportGenerator} from '@webex/internal-plugin-ediscovery';

import activities from './activities';

describe('report-generator', () => {
  const reportId = 'cc06f622-46ab-45b9-b3a6-5d70bad1d70a';

  let generator;
  beforeEach(() => {
    generator = new ReportGenerator({reportId});
  });

  describe('Initialize With No Report Id', () => {
    it('initializeError', async () => {
      assert.throws(() => new ReportGenerator());
    });
  });

  describe('Mapping', () => {
    it('mapPosts', async () => {
      const postActivities = activities.filter((activity) => activity.verb === 'post');
      expect(postActivities.length).to.be.above(0, 'activities.js missing post activities');
      for (let i = 0; i < postActivities.length; i += 1) {
        const activity = postActivities[0];
        const eml = generator.map(activity);
        expect(eml).to.include(`From: ${activity.actorDisplayName}`);
        expect(eml).to.include(`Subject: ${activity.activityId}`);
        expect(eml).to.include(`Date: ${activity.timestamp}`);
        expect(eml).to.include(activity.objectDisplayName);
      }
    });

    it('mapEvents', async () => {
      const eventActivities = activities.filter((activity) => activity.verb !== 'post' && activity.verb !== 'share');
      expect(eventActivities.length).to.be.above(0, 'activities.js missing event activities');
      for (let i = 0; i < eventActivities.length; i += 1) {
        const activity = eventActivities[i];
        const eml = generator.map(activity);
        expect(eml).to.include(`From: ${activity.actorDisplayName}`);
        expect(eml).to.include(`Subject: ${activity.activityId}`);
        expect(eml).to.include(`Date: ${activity.timestamp}`);
        if (activity.objectId) {
          expect(eml).to.include(`${activity.verb} ${activity.objectId}`);
        }
        else {
          expect(eml).to.include(`${activity.verb}`);
        }
      }
    });

    it('mapShares', async () => {
      const shareActivities = activities.filter((activity) => activity.verb === 'share');
      expect(shareActivities.length).to.be.above(0, 'activities.js missing event activities');
      for (let i = 0; i < shareActivities.length; i += 1) {
        const activity = shareActivities[i];
        const eml = generator.map(activity);
        if (activity.files) {
          expect(eml).to.include(`From: ${activity.actorDisplayName}`);
          expect(eml).to.include(`Content-Type: ${activity.files[0].mimeType}`);
          expect(eml).to.include(`filename=${activity.files[0].displayName}`);
        }
        else if (activity.whiteboards) {
          expect(eml).to.include(`Content-Type: ${activity.whiteboards[0].mimeType}`);
        }
        expect(eml).to.include(`Subject: ${activity.activityId}`);
        expect(eml).to.include(`Date: ${activity.timestamp}`);
        expect(eml).to.include('Content-Disposition: attachment');
        if (activity.objectId) {
          expect(eml).to.include(`${activity.verb} ${activity.objectId}`);
        }
        else {
          expect(eml).to.include(`${activity.verb}`);
        }
      }
    });

    it('emptyActivity', async () => {
      assert.throws(() => generator.map());
    });
  });

  describe('Add Activities to Report Tests', () => {
    it('addActivities', async () => {
      generator.add(activities);

      assert.isOk(generator.zip);
      assert.isOk(generator.folder);
      // Account for 'file' objects that represent folders
      const emlFiles = Object.keys(generator.folder.files).filter((key) => key.endsWith('.eml'));
      assert.equal(emlFiles.length, activities.length);
      // Validate each activity has an associated file in the zip
      for (let i = 0; i < activities.length; i += 1) {
        const activity = activities[i];
        expect(generator.folder.files).to.have.property(`${generator.folder.root}${activity.targetId}/${activity.activityId}.eml`);
      }
    });

    it('emptyActivities', async () => {
      assert.throws(() => generator.add(undefined));
      assert.throws(() => generator.add([]));
    });
  });

  describe('Save As Tests', () => {
    skipInNode(it)('saveAs', async () => {
      generator.add(activities);
      generator.saveAs(reportId)
        .then(() => assert.isOk(true));
    });

    it('saveAsWithNoAdd', async () => {
      assert.throws(() => generator.saveAs(reportId));
    });
  });
});
