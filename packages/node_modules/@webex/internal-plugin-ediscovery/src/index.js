/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import '@ciscospark/internal-plugin-encryption';
import '@ciscospark/internal-plugin-conversation';

import {registerInternalPlugin} from '@ciscospark/spark-core';
import {has} from 'lodash';

import EDiscovery from './ediscovery';

registerInternalPlugin('ediscovery', EDiscovery, {
  payloadTransformer: {
    predicates: [
      {
        name: 'decryptReportRequest',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body.reportRequest'));
        },
        extract(object) {
          return Promise.resolve(object.body.reportRequest);
        }
      },
      {
        name: 'decryptReportRequestArray',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body[0].reportRequest'));
        },
        extract(object) {
          return Promise.resolve(object.body);
        }
      },
      {
        name: 'encryptReportRequest',
        direction: 'outbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body.keywords'));
        },
        extract(object) {
          return Promise.resolve(object.body);
        }
      },
      {
        name: 'transformReportRequestEmailsToUUIDS',
        direction: 'outbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body.emails'));
        },
        extract(object) {
          return Promise.resolve(object.body);
        }
      },
      {
        name: 'decryptReportContent',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body.activityId'));
        },
        extract(object) {
          return Promise.resolve(object.body);
        }
      },
      {
        name: 'decryptReportContentArray',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body[0].activityId'));
        },
        extract(object) {
          return Promise.resolve(object.body);
        }
      }
    ],
    transforms: [
      {
        name: 'decryptReportRequest',
        direction: 'inbound',
        fn(ctx, object) {
          if (!object || !object.encryptionKeyUrl) {
            return Promise.resolve();
          }

          const keywordPromises = Promise.all(object.keywords.map((keyword) => ctx.spark.internal.encryption.decryptText(object.encryptionKeyUrl, keyword)))
            .then((decryptedKeywords) => {
              object.keywords = decryptedKeywords;
            });

          return Promise.all([
            ctx.transform('decryptTextProp', 'name', object.encryptionKeyUrl, object),
            ctx.transform('decryptTextProp', 'description', object.encryptionKeyUrl, object)
          ].concat(keywordPromises));
        }
      },
      {
        name: 'decryptReportRequestArray',
        direction: 'inbound',
        fn(ctx, array) {
          if (!array) {
            return Promise.resolve();
          }

          return Promise.all(array.map((item) => ctx.transform('decryptReportRequest', item.reportRequest)));
        }
      },
      {
        name: 'encryptReportRequest',
        direction: 'outbound',
        fn(ctx, object) {
          if (!object) {
            return Promise.resolve();
          }
          return ctx.spark.internal.encryption.kms.createUnboundKeys({count: 1})
            .then((keys) => {
              if (keys && keys.length > 0 && keys[0]) {
                object.encryptionKeyUrl = keys[0].uri;
                return ctx.spark.internal.encryption.kms.createResource({userIds: [keys[0].userId], keys})
                  .then(() => {
                    const keywordPromises = Promise.all(object.keywords.map((keyword) => ctx.spark.internal.encryption.encryptText(keys[0], keyword)))
                      .then((encryptedKeywords) => {
                        object.keywords = encryptedKeywords;
                      });

                    return Promise.all([
                      ctx.transform('encryptTextProp', 'name', keys[0], object),
                      ctx.transform('encryptTextProp', 'description', keys[0], object)
                    ].concat(keywordPromises));
                  });
              }
              return Promise.resolve();
            })
            .catch((reason) => Promise.reject(reason));
        }
      },
      {
        name: 'transformReportRequestEmailsToUUIDS',
        direction: 'outbound',
        fn(ctx, object) {
          if (!object) {
            throw Error('Invalid parameter');
          }

          if (object.emails.length <= 0) {
            // delete emails property as it does not exist in the eDiscovery service
            delete object.emails;
            return Promise.resolve();
          }

          const promises = [];
          object.emails.forEach((userEmail) => {
            promises.push(
              // The people list API only supports a single email
              ctx.spark.people.list({email: userEmail})
                .then((res) => {
                  if (res.items.length <= 0) {
                    throw Error(`Unable to find user with email ${userEmail}`);
                  }
                  // User id is base64 encoded and of the format Y2lzY29zcGFyazovL3VzL1BFT1BMRS81ZDU5Yjc5NS02ZmEyLTQ2NTQtOGVjMi03NjlkYjE1YzBkOWU
                  const decodedId = Buffer.from(res.items[0].id, 'base64').toString();
                  // Decode and strip out the uuid ciscospark://us/PEOPLE/5d59b795-6fa2-4654-8ec2-769db15c0d9e
                  const uuid = decodedId.substring(decodedId.lastIndexOf('/') + 1, decodedId.length);
                  return uuid;
                })
                .catch((reason) => Promise.reject(reason))
            );
          });
          return Promise.all(promises)
            .then((uuids) => {
              object.userIds = uuids;
              // delete emails property as it does not exist in the eDiscovery service
              delete object.emails;
            });
        }
      },
      {
        name: 'decryptReportContent',
        direction: 'inbound',
        fn(ctx, object) {
          if (!object) {
            return Promise.resolve();
          }

          const promises = [];
          if (object.verb === 'post' && object.objectDisplayName && object.encryptionKeyUrl) {
            promises.push(ctx.spark.internal.encryption.decryptText(object.encryptionKeyUrl, object.objectDisplayName, {onBehalfOf: object.actorId})
              .then((decryptedMessage) => {
                object.objectDisplayName = decryptedMessage;
              })
              .catch((reason) => {
                ctx.spark.logger.info(`Decrypt message error for activity ${object.activityId}: ${reason}`);
                return object; // TODO - determine correct behaviour when an individual operation fails
              }));
          }
          else if (object.verb === 'share' && object.files && object.files.length && object.encryptionKeyUrl) {
            for (let i = 0; i < object.files.length; i += 1) {
              const file = object.files[i];
              if (file && file.displayName && file.scr) {
                promises.push(ctx.spark.internal.encryption.decryptText(object.encryptionKeyUrl, file.displayName, {onBehalfOf: object.actorId})
                  .then((decryptedFilename) => {
                    file.name = decryptedFilename;
                  })
                  .catch((reason) => {
                    ctx.spark.logger.info(`Decrypt filename error for activity ${object.activityId}: ${reason}`);
                    return object; // TODO - determine correct behaviour when an individual operation fails
                  }));
                promises.push(ctx.spark.internal.encryption.decryptScr(object.encryptionKeyUrl, file.scr, {onBehalfOf: object.actorId})
                  .then((decryptedScr) => {
                    file.scr = decryptedScr;
                  })
                  .catch((reason) => {
                    ctx.spark.logger.info(`Decrypt scr error for activity ${object.activityId}: ${reason}`);
                    return object; // TODO - determine correct behaviour when an individual operation fails
                  }));
              }
            }
          }

          return Promise.all(promises);
        }
      },
      {
        name: 'decryptReportContentArray',
        direction: 'inbound',
        fn(ctx, array) {
          if (!array) {
            return Promise.resolve();
          }

          return Promise.all(array.map((item) => ctx.transform('decryptReportContent', item)));
        }
      }
    ]
  }
});

export default EDiscovery;

export {config} from './config';
export {default as ReportGenerator} from './report-generator';
export {default as ReportRequest} from './report-request';
