
import uuid from 'uuid';
import retry from '@ciscospark/test-helper-retry';

const CMR = {};
CMR.reserve = (spark) => {
  if (!spark) {
    return Promise.reject(new Error('spark is required'));
  }

  // If you are using https://whistler-prod.onint.ciscospark.com/api/v1 and want CMR4, pass CMR_4
  // If you are using https://whistler-prod.onint.ciscospark.com/api/v1 and want CMR3, pass CMR_3
  // If you are using https://whistler.onint.ciscospark.com/api/v1 and want CMR4, pass CMR_4_INT (soon youâ€™ll just pass CMR_4)
  // If you are using https://whistler.onint.ciscospark.com/api/v1 and want CMR3, pass CMR_3
  const resourceType = 'CMR_3';
  console.log('RESERVING INITIATED');
  return spark.request({
    method: 'POST',
    uri: 'https://whistler-prod.onint.ciscospark.com/api/v1/reservations',
    headers: {
      authorization: `Bearer ${spark.credentials.supertoken.access_token}`,
      'cisco-no-http-redirect': null,
      'spark-user-agent': null,
      trackingid: `ITCLIENT_${uuid.v4()}_0_imi:true`
    },
    body: {
      resourceType,
      requestMetaData: {
        emailAddress: `test${uuid.v4()}@wx2.example.com`,
        loginType: 'loginGuest'
      },
      reservedBy: 'Spark JavaScript SDK Test Suite'
    }
  })
    .then((cmr) => {
      console.log('reserved cmr');
      console.log('reserved cmr');
      cmr.sipAddress = `${cmr.responseMetaData.meetingId}@${cmr.responseMetaData.domain}`;
      return cmr.body;
    })
    .catch((e) => console.error('Error resorving CMR ', e));
};

CMR.release = (spark, reservationUrl) => {
  console.log('releasing cmr');
  return spark.request({
    method: 'DELETE',
    uri: reservationUrl,
    headers: {
      authorization: `Bearer ${spark.credentials.supertoken.access_token}`,
      'cisco-no-http-redirect': null,
      'spark-user-agent': null
    }
  })
    .then(() => console.log('released cmr'));
};

CMR.waitForHostToJoin = (spark, resourceUrl) => retry(() => {
  console.log('checking if the host has joined');
  return spark.request({
    method: 'GET',
    uri: resourceUrl,
    headers: {
      authorization: `Bearer ${spark.credentials.supertoken.access_token}`,
      'cisco-no-http-redirect': null,
      'spark-user-agent': null
    }
  })
    .then((res) => {
      if (res.body && res.body.meeting.hostPresent) {
        console.log('the host has joined');
        return;
      }

      console.log('the host has not joined');
      throw new Error('Meeting host has not yet joined');
    });
})
  .then(() => true)
  .catch((reason) => {
    console.warn(reason);
    return false;
  });


export default CMR;
