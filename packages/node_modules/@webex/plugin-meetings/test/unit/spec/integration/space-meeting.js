
import {assert} from '@ciscospark/test-helper-chai';
import sinon from '@ciscospark/test-helper-sinon';
import uuid from 'uuid';

import testUtils from './testUtils';

require('dotenv').config();

const sparkTestUsers = require('./sparkTestUsers.js');

let userSet, alice, bob, chris;

describe('plugin-meetings-automation', () => {
  xdescribe('plugin-meeting-space-meeting', () => {
    before(() => sparkTestUsers.generateTestUsers({count: 3})
      .then((users) => {
        userSet = users;
        alice = userSet[0];
        bob = userSet[1];
        chris = userSet[2];
        alice.name = 'alice';
        bob.name = 'bob';
      })
      .then(() => Promise.all([testUtils.syncAndEndMeeting(alice),
        testUtils.syncAndEndMeeting(bob)]))
      .catch((error) => {
        console.log(error);
      }));

    after(() => {
      const promise = [];
      userSet.forEach((user) => {
        promise.push(user.spark.internal.mercury.disconnect());
      });

      return Promise.all(promise)
        .then(() => sparkTestUsers.remove(userSet));
      // TODO: end is not a function on browser object
    });

    describe('Space meeting', () => {
      let space = null;
      const aliceMeetingAdded = sinon.spy();
      const bobMeetingAdded = sinon.spy();
      const chrisMeetingAdded = sinon.spy();
      it('Alice creates a space', () => alice.spark.internal.conversation.create({participants: [bob, chris]})
        .then((conversation) => {
          assert.lengthOf(conversation.participants.items, 3);
          assert.lengthOf(conversation.activities.items, 1);
          console.log('CONVERSATION', conversation);
          space = conversation;
        }));
      it('alice starts a space meeting', () => {
        chris.spark.meetings.on('meeting:added', chrisMeetingAdded);
        bob.spark.meetings.on('meeting:added', bobMeetingAdded);
        alice.spark.meetings.on('meeting:added', aliceMeetingAdded);
        return alice.spark.meetings.create(space.id)
          .then((m) => m.join()
            .then(() => testUtils.waitForSpy(aliceMeetingAdded, 'meeting:added'))
            .then((m) => {
              console.log('ALICE meeting ', m);
              alice.meeting = m.meeting;
            }))
          .then(() => testUtils.waitForSpy(bobMeetingAdded, 'meeting:added'))
          .then((m) => {
            bob.meeting = m.meeting;
          })
          .then(() => testUtils.waitForSpy(chrisMeetingAdded, 'meeting:added'))
          .then((m) => {
            chris.meeting = m.meeting;
          })
          .then(() => testUtils.waitForStateChange(alice.meeting, 'JOINED'))
          .then(() => testUtils.waitForStateChange(bob.meeting, 'IDLE'))
          .then(() => testUtils.waitForStateChange(chris.meeting, 'IDLE'));
      });

      it('check state of alice', () => {
        assert.equal(alice.meeting.state, 'JOINED');
        assert.equal(bob.meeting.state, 'IDLE');
        assert.equal(chris.meeting.state, 'IDLE');
      });

      it('bob and chris joins the meeting', () => bob.meeting.join()
        .then(() => chris.meeting.join())
        .then(() => testUtils.waitForStateChange(bob.meeting, 'JOINED'))
        .then(() => testUtils.waitForStateChange(chris.meeting, 'JOINED')));

      it('alice bob and chris leaves the meeting', () => alice.meeting.leave()
        .then(() => bob.meeting.leave())
        .then(() => testUtils.waitForStateChange(alice.meeting, 'LEFT'))
        .then(() => testUtils.waitForStateChange(bob.meeting, 'LEFT'))
        .then(() => chris.meeting.leave())
        .then(() => testUtils.waitForStateChange(chris.meeting, 'LEFT')));
    });
  });

  describe('plugin-meeting-webex-meeting', () => {
    let pmr = null;
    before(() => sparkTestUsers.generateTestUsers({count: 3})
      .then((users) => {
        userSet = users;
        alice = userSet[0];
        bob = userSet[1];
        chris = userSet[2];
        alice.name = 'alice';
        bob.name = 'bob';
      })
      .then(() => Promise.all([testUtils.syncAndEndMeeting(alice),
        testUtils.syncAndEndMeeting(bob)]))
      .then(() => {
        console.log('CREDENTIALS ', alice.spark.credentials.supertoken.access_token);
        return alice.spark.request({
          method: 'POST',
          uri: 'https://whistler.onint.ciscospark.com/api/v1/reservations',
          headers: {
            authorization: `Bearer ${alice.spark.credentials.supertoken.access_token}`,
            'cisco-no-http-redirect': null,
            'spark-user-agent': null,
            trackingid: `ITCLIENT_${uuid.v4()}_0_imi:true`
          },
          body: {
            resourceType: 'CMR_4_INT',
            reservedBy: 'SDK_TEST_USER',
            requestMetaData: {
              emailAddress: alice.emailAddress,
              loginType: 'loginGuest'
            }
          }
        })
          .then((res) => {
            pmr = res;
            console.log('SUCCESS ', res);
          });
      })
      .catch((error) => {
        console.log('WEBEX MEETING error ', error);
      }));

    after(() => {
      const promise = [];
      userSet.forEach((user) => {
        promise.push(user.spark.internal.mercury.disconnect());
      });

      return Promise.all(promise)
        .then(() => sparkTestUsers.remove(userSet));
      // TODO: end is not a function on browser object
    });

    it('pme exists ', () => {
      assert.exists(pmr);
    });

    // describe('Space meeting', () => {
    //   let space = null;
    //   const aliceMeetingAdded = sinon.spy();
    //   const bobMeetingAdded = sinon.spy();
    //   const chrisMeetingAdded = sinon.spy();
    //   it('Alice creates a space', () => alice.spark.internal.conversation.create({participants: [bob, chris]})
    //     .then((conversation) => {
    //       assert.lengthOf(conversation.participants.items, 3);
    //       assert.lengthOf(conversation.activities.items, 1);
    //       console.log('CONVERSATION', conversation);
    //       space = conversation;
    //     }));
    //   it('alice starts a space meeting', () => {
    //     chris.spark.meetings.on('meeting:added', chrisMeetingAdded);
    //     bob.spark.meetings.on('meeting:added', bobMeetingAdded);
    //     alice.spark.meetings.on('meeting:added', aliceMeetingAdded);
    //     return alice.spark.meetings.create(space.id)
    //       .then((m) => m.join()
    //         .then(() => testUtils.waitForSpy(aliceMeetingAdded, 'meeting:added'))
    //         .then((m) => {
    //           console.log('ALICE meeting ', m);
    //           alice.meeting = m.meeting;
    //         }))
    //       .then(() => testUtils.waitForSpy(bobMeetingAdded, 'meeting:added'))
    //       .then((m) => {
    //         bob.meeting = m.meeting;
    //       })
    //       .then(() => testUtils.waitForSpy(chrisMeetingAdded, 'meeting:added'))
    //       .then((m) => {
    //         chris.meeting = m.meeting;
    //       })
    //       .then(() => testUtils.waitForStateChange(alice.meeting, 'JOINED'))
    //       .then(() => testUtils.waitForStateChange(bob.meeting, 'IDLE'))
    //       .then(() => testUtils.waitForStateChange(chris.meeting, 'IDLE'));
    //   });

    //   it('check state of alice', () => {
    //     assert.equal(alice.meeting.state, 'JOINED');
    //     assert.equal(bob.meeting.state, 'IDLE');
    //     assert.equal(chris.meeting.state, 'IDLE');
    //   });

    //   it('bob and chris joins the meeting', () => bob.meeting.join()
    //     .then(() => chris.meeting.join())
    //     .then(() => testUtils.waitForStateChange(bob.meeting, 'JOINED'))
    //     .then(() => testUtils.waitForStateChange(chris.meeting, 'JOINED')));

    //   it('alice bob and chris leaves the meeting', () => alice.meeting.leave()
    //     .then(() => bob.meeting.leave())
    //     .then(() => testUtils.waitForStateChange(alice.meeting, 'LEFT'))
    //     .then(() => testUtils.waitForStateChange(bob.meeting, 'LEFT'))
    //     .then(() => chris.meeting.leave())
    //     .then(() => testUtils.waitForStateChange(chris.meeting, 'LEFT')));
    // });
  });
});
