
const testUser = require('@ciscospark/test-helper-test-users');
const Spark = require('@ciscospark/spark-core').default;

const config = require('./sparkconfig.js');


// Include the plugins which you feel will be used by the spark instance
require('@ciscospark/internal-plugin-mercury');
require('@ciscospark/internal-plugin-user');
require('@ciscospark/internal-plugin-wdm');
require('@ciscospark/internal-plugin-conversation');
require('@webex/plugin-meetings');

const generateTestUsers = (options) => testUser.create({count: options.count})
  .then((userSet) => {
    const mercuryPromise = [];
    const devicePromise = [];

    userSet.forEach((user) => {
      user.spark = new Spark({
        config: config.spark,
        credentials: {
          authorization: user.token
        }
      });

      console.log(user.spark);
      mercuryPromise.push(user.spark.internal.mercury.connect());
      devicePromise.push(user.spark.internal.device.register());
    });

    return Promise.all(mercuryPromise)
      .then(() => Promise.all(devicePromise))
      .then(() => userSet)
      .catch((error) => {
        console.log(error);
      });
  })
  .catch((error) => {
    console.log('ERROR', error);
  });

const remove = (userSet) => testUser.remove(userSet);

module.exports = {
  generateTestUsers,
  remove
};
