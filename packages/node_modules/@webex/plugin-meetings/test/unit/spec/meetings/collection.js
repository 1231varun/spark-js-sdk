/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@ciscospark/test-helper-chai';
import MeetingCollection from '@webex/plugin-meetings/src/meetings/collection';

describe('plugin-meetings', () => {
  describe('meetings collection', () => {
    beforeEach(() => {
      MeetingCollection.meetings = {};
    });
    describe('#get', () => {
      beforeEach(() => {
        MeetingCollection.meetings.test = 'test';
      });
      it('should get the meeting', () => {
        assert.equal(MeetingCollection.get('test'), 'test');
      });
    });
    describe('#set', () => {
      it('should set the meeting', () => {
        assert.equal(Object.keys(MeetingCollection.meetings).length, 0);
        MeetingCollection.set({id: 'test'});
        assert.equal(Object.keys(MeetingCollection.meetings).length, 1);
      });
    });
    describe('#remove', () => {
      beforeEach(() => {
        MeetingCollection.meetings.test = 'test';
      });
      it('should get the meeting', () => {
        assert.equal(Object.keys(MeetingCollection.meetings).length, 1);
        assert.equal(MeetingCollection.remove('test'), 'test');
        assert.equal(Object.keys(MeetingCollection.meetings).length, 0);
      });
    });
    describe('#getAll', () => {
      beforeEach(() => {
        MeetingCollection.meetings.test = 'test';
        MeetingCollection.meetings.test2 = 'test2';
      });
      it('should get all the meeting', () => {
        assert.equal(Object.keys(MeetingCollection.meetings).length, 2);
        assert.deepEqual(Object.keys(MeetingCollection.getAll()), ['test', 'test2']);
      });
      describe('with filters', () => {
        beforeEach(() => {
          MeetingCollection.meetings.test = {id: 'test', active: true};
          MeetingCollection.meetings.test2 = {id: 'test2', active: false};
        });
        it('should get all the active meetings', () => {
          assert.equal(Object.keys(MeetingCollection.meetings).length, 2);
          assert.deepEqual(Object.keys(MeetingCollection.getAll({active: true})), ['test']);
        });
      });
    });
    describe('#getByKey', () => {
      beforeEach(() => {
        MeetingCollection.meetings.test = {value: 'test', id: 'findme'};
        MeetingCollection.meetings.test2 = {value: 'test2'};
      });
      it('should get the meeting by key', () => {
        assert.equal(Object.keys(MeetingCollection.meetings).length, 2);
        assert.deepEqual(MeetingCollection.getByKey('value', 'test'), {value: 'test', id: 'findme'});
      });
    });
  });
});
