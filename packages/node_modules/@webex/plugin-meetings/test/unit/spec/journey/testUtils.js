
const max = 20000;
const waitForSpy = (spy, event) => {
  let timer;

  return Promise.race([
    new Promise((resolve, reject) => {
      timer = setTimeout(() => {
        reject(new Error(` ${event} did not fire`));
      }, max);
    }),
    new Promise((resolve) => {
      const interval = setInterval(() => {
        if (spy.calledOnce) {
          clearTimeout(timer);
          clearInterval(interval);
          resolve(spy.args[0][0]);
        }
      }, 1000);
    })
  ]);
};

const waitForStateChange = (meeting, state) => {
  let timer;

  return Promise.race([
    new Promise((resolve, reject) => {
      timer = setTimeout(() => {
        reject(new Error(`Expected:  ${state} , Actual: ${meeting.state}`));
      }, max);
    }),
    new Promise((resolve) => {
      const interval = setInterval(() => {
        if (meeting.state === state) {
          clearTimeout(timer);
          clearInterval(interval);
          resolve(meeting.locusInfo.parsedLocus.states);
        }
      }, 1000);
    })
  ]);
};

const waitForCallEnded = (user, email) => {
  let timer;

  return Promise.race([
    new Promise((resolve, reject) => {
      timer = setTimeout(() => {
        reject(new Error(` ${user.name} meeting still exists`));
      }, max);
    }),
    new Promise((resolve) => {
      const interval = setInterval(() => {
        if (!user.spark.meetings.getMeetingByType('sipUri', email)) {
          clearTimeout(timer);
          clearInterval(interval);
          resolve();
        }
        else {
          console.log('MEETING STILL EXISTS!', user.spark.meetings.getAllMeetings());
        }
      }, 3000);
    })
  ]);
};

const syncAndEndMeeting = (user) => user.spark.meetings.syncMeetings()
  .then(() => {
    const promise = [];
    const meetings = user.spark.meetings.getAllMeetings();

    if (Object.keys(meetings).length === 0) {
      return Promise.resolve();
    }
    Object.keys(meetings)
      .forEach((key) => {
        promise.push(meetings[key].leave());
      });

    return Promise.all(promise);
  })
  .then(() => new Promise((resolve) => {
    const interval = setInterval(() => {
      if (Object.keys(user.spark.meetings.getAllMeetings()).length === 0) {
        clearInterval(interval);
        resolve();
      }
      else {
        console.log('End Meetings before test failed');
      }
    }, 3000);
  }))
  .catch((e) => {
    console.log('ERROR on syncMeeting', e);
  });

//
const waitForEvents = (scopeEvents) => {
  let timer;

  return Promise.race([
    new Promise((resolve, reject) => {
      timer = setTimeout(() => {
        reject(new Error(' Events not triggred'));
      }, 29000);
    }),
    new Promise((resolve, reject) => {
      try {
        const result = [];

        scopeEvents.forEach((obj) => {
          obj.scope.once(obj.event, (value) => {
            result.push(Object.assign(obj, {result: value}));
            if (obj.event === 'meeting:added') {
              obj.user.meeting = value.meeting;
              obj.user.meeting.name = obj.user.name;
              obj.user.memberId = value.meeting.locusInfo.parsedLocus.selfId;
            }
            if (obj.event === 'meeting:removed') {
              console.log('MEETING:REMOVED BEFORE', value);
              console.log(`MEETING:REMOVED ${obj.user.name} ID ${obj.user.meeting.id} correlationID ${obj.user.meeting.correlationId}`);
              if (obj.user.meeting.id === value.meetingId) {
                obj.user.meeting = null;
              }
              else {
                console.log('MEETING EXISTING ', obj.user.spark.meetings.getAllMeetings());
                reject(new Error(`Different Meeting Object ${value}`));
              }
            }
            if (result.length === scopeEvents.length) {
              resolve(result);
              clearTimeout(timer);
            }
          });
        });
      }
      catch (e) {
        console.error('waitForEvents', e);
        reject(e);
      }
    })
  ]);
};

const delayedPromise = (promise) => {
  let timer;

  return Promise.race([
    new Promise((resolve, reject) => {
      timer = setTimeout(() => {
        reject(new Error(' Events not triggred'));
      }, max);
    }),
    new Promise((resolve, reject) => {
      setTimeout(() => {
        promise.then((res) => {
          resolve(res);
          clearTimeout(timer);
        })
          .catch((e) => {
            console.error('delayedPromise', e);
            reject(e);
          });
      }, 2000);
    })
  ]);
};

export default {
  waitForSpy,
  waitForStateChange,
  waitForCallEnded,
  syncAndEndMeeting,
  waitForEvents,
  delayedPromise
};

