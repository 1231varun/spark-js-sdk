
const testUser = require('@ciscospark/test-helper-test-users');
const Spark = require('@ciscospark/spark-core').default;

const config = require('./sparkconfig.js');


// Include the plugins which you feel will be used by the spark instance
// require('@ciscospark/internal-plugin-encryption');
// require('@ciscospark/internal-plugin-feature');
require('@ciscospark/internal-plugin-mercury');
require('@ciscospark/internal-plugin-user');
require('@ciscospark/internal-plugin-wdm');
// require('@ciscospark/plugin-logger');
require('@webex/plugin-meetings');


// const getUniqueTestUsers = (userConfig) => {
//     const users = [];
//     const previousUser = waitForPromise(testUser.create({ count: 1 }))[0];
//     users.push(previousUser);
//     // We are looping till we get 3 unique users
//     while (users.length < userConfig.count) {
//         const nextUser = waitForPromise(testUser.create({ count: 2 }));
//         if (nextUser[0].name !== nextUser[1].name
//             && previousUser.name !== nextUser[0].name
//             && previousUser.name !== nextUser[1].name) {
//             users.push(nextUser[0], nextUser[1]);
//         }
//     }
//     return users;
// };

// const createTestUsers = (userConfig) => {
//     const users = getUniqueTestUsers(userConfig);

//     // Remove this map function
//     return Promise.map(users, (user, index) => {
//         user.spark = new Spark({
//             config: config.spark,
//             credentials: {
//                 authorization: users[index].token
//             }
//         });

//         return user.spark.internal.mercury.connect()
//             .then(() =>
//                 user.spark.internal.device.register())
//             .then(() => user);
//     })
//     .catch((error) => {
//         console.log("Error generating user", error);
//     })
// };

const generateTestUsers = (options) => testUser.create({count: options.count})
  .then((userSet) => {
    const mercuryPromise = [];
    const devicePromise = [];
    userSet.forEach((user) => {
      user.spark = new Spark({
        config: config.spark,
        credentials: {
          authorization: user.token
        }
      });

      console.log(user.spark);
      mercuryPromise.push(user.spark.internal.mercury.connect());
      devicePromise.push(user.spark.internal.device.register());
    });

    return Promise.all(mercuryPromise)
      .then(() => Promise.all(devicePromise))
      .then(() => userSet)
      .catch((error) => {
        console.log(error);
      });
  })
  .catch((error) => {
    console.log('ERROR', error);
  });

const remove = (userSet) => testUser.remove(userSet);

module.exports = {
  generateTestUsers,
  // createTestUsers,
  remove
};
