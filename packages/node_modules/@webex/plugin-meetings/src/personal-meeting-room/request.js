import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {MEETINGS} from '../constants';

import PersonalMeetingRoomUtil from './util';
/**
 * @class MeetingInfoRequest
 */
export default class PersonalMeetingRoomRequest extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   *
   * @param {Object} options with format of {userId, passcode, meetingAddress, preferred}
   * @returns {Promise} returns a promise that resolves/rejects the result of the request
   * @memberof PersonalMeetingRoomRequest
   */
  claimPmr(options) {
    if (!options || !options.userId || !options.passcode || !options.meetingAddress || !options.preferred) {
      throw new Error('Claiming a PMR should be done with userId, passcode, meetingAddress, and pereferred fields.');
    }
    const validPin = PersonalMeetingRoomUtil.getClaimPmrPin(options.passcode);
    if (!validPin) {
      return Promise.reject(new Error('The host pin provided was of an invalid format'));
    }
    const validLink = PersonalMeetingRoomUtil.getClaimPmrLink(options.meetingAddress);
    if (!validLink) {
      return Promise.reject(new Error('The pmr link provided was of an invalid format'));
    }
    const request = PersonalMeetingRoomUtil.getClaimedRequestParams(validLink, validPin, options);
    return this.request(request);
  }
}
