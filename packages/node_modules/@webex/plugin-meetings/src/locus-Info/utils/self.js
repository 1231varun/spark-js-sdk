/* globals spark */
import {IDLE, JOINED} from '../../constants';

const selfUtils = {};

selfUtils.parse = (self) => ({
  muted: self.controls.audio.muted,
  guest: self.guest,
  moderator: self.moderator,
  mediaStatus: selfUtils.getStatus(self.status),
  state: self.state,
  // TODO: give a proper name . With same device as login or different login`
  // Some times we might have joined with both mobile and web
  joinedWith: selfUtils.checkJoinedStatus(self) ? 'SELF' : 'OTHER',
  creator: self.isCreator // check if its used
});

/**
 * returns true of false if this device has joined the meeting
 * @param {boolen} self  true
 * @returns {boolen} return true if you have joined the meeting
 */
selfUtils.checkJoinedStatus = (self) => {
  // Device you logged in with
  const selfDeviceUrl = spark.internal.device.url;
  return self.devices.some((device) => selfDeviceUrl === device.Url);
};

selfUtils.getStatus = (status) => ({
  audio: status.audioStatus,
  video: status.videoStatus,
  slides: status.videoSlidesStatus
});

selfUtils.isLocusGuestUnadmitted = (check) => check && check.guest && check.state === IDLE;

selfUtils.isLocusGuestAdmitted = (check) => check && check.guest && check.state === JOINED;

selfUtils.isUnadmittedGuest = (locus) => {
  if (!locus) {
    throw new TypeError('Locus must be defined to determine if self is unadmitted as guest.');
  }
  return selfUtils.isLocusGuestUnadmitted(locus);
};

selfUtils.isAdmittedGuest = (oldLocus, changedLocus) => {
  if (!oldLocus) {
    // if there was no previous locus, it couldn't have been admitted yet
    return false;
  }
  if (!changedLocus) {
    throw new TypeError('New locus must be defined to determine if self transitioned to admitted as guest.');
  }
  return selfUtils.isLocusGuestUnadmitted(oldLocus) && selfUtils.isLocusGuestAdmitted(changedLocus);
};


export default selfUtils;
