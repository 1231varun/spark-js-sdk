/* globals window */
import bowser from 'bowser';

import {
  MEETINGS,
  RTC_CONFIGURATION,
  RTC_CONFIGURATION_FIREFOX
} from '../constants';

/**
 * @class MediaProperties
 */
export default class MediaProperties {
  namespace = MEETINGS;

  /**
   * @param {Object} options -- optional to auto construct
   * @returns {MediaProperties}
   */
  constructor(options = {}) {
    this.peerConnection = new window.RTCPeerConnection(bowser.firefox ? RTC_CONFIGURATION_FIREFOX : RTC_CONFIGURATION);
    this.mediaDirection = options.mediaDirection;
    this.videoTrack = options.videoTrack;
    this.audioTrack = options.audioTrack;
    this.shareTrack = options.shareTrack;
    this.remoteStream = options.remoteStream;
    this.remoteShare = options.remoteShare;
  }

  setAll(mediaDirection, peerConnection, audioTrack, videoTrack, shareTrack, remoteStream, remoteShare) {
    this.setMediaDirection(mediaDirection);
    this.setMediaPeerConnection(peerConnection);
    this.setLocalAudioTrack(audioTrack);
    this.setLocalVideoTrack(videoTrack);
    this.setLocalShareTrack(shareTrack);
    this.setRemoteStream(remoteStream);
    this.setRemoteShare(remoteShare);
  }

  setMediaDirection(mediaDirection) {
    this.mediaDirection = mediaDirection;
  }

  setMediaPeerConnection(peerConnection) {
    this.peerConnection = peerConnection;
  }

  setLocalVideoTrack(videoTrack) {
    this.videoTrack = videoTrack;
  }

  setLocalAudioTrack(audioTrack) {
    this.audioTrack = audioTrack;
  }

  setLocalShareTrack(shareTrack) {
    this.shareTrack = shareTrack;
  }

  setRemoteStream(remoteStream) {
    this.remoteStream = remoteStream;
  }

  setRemoteShare(remoteShare) {
    this.remoteShare = remoteShare;
  }

  unsetPeerConnection() {
    this.peerConnection = null;
  }

  unsetLocalVideoTrack() {
    this.videoTrack = null;
  }

  unsetLocalShareTrack() {
    this.shareTrack = null;
  }

  unsetLocalAudioTrack() {
    this.audioTrack = null;
  }

  unsetRemoteStream() {
    this.remoteStream = null;
  }

  unsetRemoteShare() {
    this.remoteShare = null;
  }

  unsetLocalVideoTracks() {
    this.unsetLocalVideoTrack();
    this.unsetLocalShareTrack();
  }

  unsetRemoteStreams() {
    this.unsetRemoteStream();
    this.unsetRemoteShare();
  }

  unsetShareStreams() {
    this.unsetLocalShareTrack();
    this.unsetRemoteShare();
  }

  unsetMediaStreams() {
    this.unsetLocalVideoTrack();
    this.unsetRemoteStream();
  }
}
