import StateMachine from 'javascript-state-machine';
import StateMachineHistory from 'javascript-state-machine/lib/history';

import Media from '../media';
import MeetingUtil from '../meeting/util';
import {MEETING_AUDIO_STATE_MACHINE, EVENT_TRIGGERS, EVENT_TYPES} from '../constants';

const handleTransition = (value, audio, meeting) => {
  if (audio.mute && audio.self) {
    value = MEETING_AUDIO_STATE_MACHINE.STATES.MUTE_SELF;
  }
  if (!audio.mute && audio.self) {
    value = MEETING_AUDIO_STATE_MACHINE.STATES.UNMUTE_SELF;
  }
  return value;
};

const triggerEvent = (meeting, state, result, trigger, type) => {
  meeting.trigger(trigger, {
    type,
    status: state.state,
    muted: state.muted,
    result
  });
};

const doToggle = (state, transition, audio, meeting) => {
  MeetingUtil.remoteUpdateAudioVideo(audio, {mute: meeting.video.muted}, meeting)
    .then((resolution) => {
      try {
        Media.setLocalTracks(audio, {mute: meeting.video.muted}, meeting.localMediaStream);
      }
      catch (error) {
        MeetingUtil.remoteUpdateAudioVideo({mute: state.muted}, {mute: meeting.video.muted}, meeting)
          .catch((error) => {
            console.log(`audio:state#onBeforeTogglek->${transition.event} fired! State failed to change with transition '${transition.transition}''. After local audio toggle failed, resetting remote also failed, meeting audio in bad state with error: ${error}.`);
          });
        triggerEvent(meeting, state, error, EVENT_TRIGGERS.MEDIA_AUDIO, EVENT_TYPES.ERROR);
        console.log(`audio:state#onBeforeTogglek->${transition.event} fired! State failed to change with transition '${transition.transition}''. State has been reset and toggling has been reversed.`);
        return Promise.reject(error);
      }
      triggerEvent(meeting, state, resolution, EVENT_TRIGGERS.MEDIA_AUDIO, EVENT_TYPES.LOCAL);
      console.log(`audio:state#onAfterToggle->${transition.event} fired! State changed from '${transition.from}' to '${transition.to}' with transition '${transition.transition}''.`);
      return Promise.resolve(resolution);
    }).catch((error) => {
      triggerEvent(meeting, state, error, EVENT_TRIGGERS.MEDIA_AUDIO, EVENT_TYPES.ERROR);
      console.log(`audio:state#onAfterHistoryBack->${transition.event} fired! State failed to change with transition '${transition.transition}''. State has been reset and toggling has been reversed.`);
      return Promise.reject(error);
    });
};

const AudioStateMachine = {
  create(mediaDirection) {
    if (!mediaDirection.sendAudio) {
      return undefined;
    }
    return new StateMachine({
      transitions: [
        {
          name: MEETING_AUDIO_STATE_MACHINE.TRANSITIONS.TOGGLE,
          from: '*',
          to: function (audio, meeting) {
            return handleTransition(this.state, audio, meeting);
          }
        }
      ],
      data: {
        muted: false,
        self: true
      },
      methods: {
        isMuted() {
          return this.muted;
        },
        isSelf() {
          return this.self;
        },
        setData(audio) {
          this.muted = audio.mute;
          this.self = audio.self;
        },
        // if fails, return false will cancel the transition and the state will remain unchanged, else true and keep going
        onBeforeToggle(transition, audio, meeting) {
          if (transition.from !== transition.to) {
            doToggle(this, transition, audio, meeting);
          }
          return Promise.resolve(this.data);
        },
        onAfterToggle(transition, audio, meeting) {
          this.setData(audio);
          return Promise.resolve(this.data);
        },
        plugins: [
          new StateMachineHistory({max: 5})
        ]
      }
    });
  }
};

export default AudioStateMachine;
