import LocusUtil from '../locus-events/utils';
import {DELTAEVENT} from '../constants';

const Parser = {};

// https://sqbu-github.cisco.com/WebExSquared/cloud-apps/wiki/Locus-Delta-Events
Parser.updateWithDeltaLocus = (deltaLocus, meeting, isNewMeeting) => {
  // /* istanbul ignore else */
  // if (!(deltaLocus.sequence && (deltaLocus.sequence.rangeStart <= deltaLocus.sequence.rangeEnd) && (deltaLocus.sequence.rangeEnd <= min(deltaLocus.sequence.entries)))) {
  //   return null;
  // }
  // /* istanbul ignore else */

  // THIS IS A NEW MEETING OBJECT
  // // If meeting has no sequence, it means just initialized and will apply whatever in locus DTO
  // if (isNewMeeting || !this.locus.sequence) {
  //   meeting._updateWithDeltaLocus(deltaLocus, emitter);
  //   meeting.locusDesync = false;
  //   meeting.needToGetFullLocus = false;
  //   return DELTAEVENT.GT;
  // }

  if (!deltaLocus.sequence) {
    // TODO: FORce update
  }

  // TODO: If this was the first event, the client will not have a syncURL
  // in its working copy to do a GET on. In this case clients should do a GET on locusUrl contained in the DTO

  let res;
  let resBase;
  res = LocusUtil.compareLocus(deltaLocus.sequence, meeting.locus.sequence);
  // In-coming locus is greater than working copy, need to compare with base if there
  // is base sequence except the first delta locus event
  if (res === DELTAEVENT.GT && deltaLocus.baseSequence && meeting.locus.syncUrl) {
    resBase = LocusUtil.compareLocus(meeting.locus.sequence, deltaLocus.baseSequence);
    if (resBase === DELTAEVENT.LT || resBase === DELTAEVENT.CF) {
      res = DELTAEVENT.CF;
    }
  }
  // Special case for OBTP with meeting size equal or over 5. Locus might change this later
  // This is a temporary fix. I will find a better solution later.
  if (!deltaLocus.baseSequence && res === DELTAEVENT.EQ && deltaLocus.fullState.state === 'INITIALIZING'
        && deltaLocus.sequence.rangeStart === 0 && deltaLocus.sequence.rangeEnd === 0
        && deltaLocus.sequence.entries.length === 0) {
    res = DELTAEVENT.GT;
  }
  console.log('RESULT :', res);
  switch (res) {
    case DELTAEVENT.LT:
    case DELTAEVENT.EQ:
      meeting.locusDesync = false;
      meeting.needToGetFullLocus = false;
      break;
    case DELTAEVENT.CF:
      LocusUtil.generateSyncDebugFlag(meeting, deltaLocus);
      if (meeting.locusDesync) {
        meeting.needToGetFullLocus = true;
      }
      meeting.locusDesync = true;
      break;
    case DELTAEVENT.GT:
      console.info('MeetingAmpstate#updateWithDeltaLocus: MeetingConstants.deltaLocusResult.GT');
      Parser.updateMeeting(deltaLocus);
      // Turn off desync in case this delta locus comes from a sync request
      meeting.locusDesync = false;
      meeting.needToGetFullLocus = false;
      break;
    default:
  }
  return res;
};

Parser.updateMeeting = (locus, meeting) => {
  if (locus.controls != null) meeting.controls = locus.controls;
  if (locus.conversationUrl != null) meeting.conversationUrl = locus.conversationUrl;
  if (locus.created != null) meeting.created = locus.created;
  if (locus.fullState != null) meeting.fullState = locus.fullState;
  if (locus.host != null) meeting.host = locus.host;
  if (locus.info != null) meeting.info = locus.info;
  if (locus.mediaShares != null) meeting.mediaShares = locus.mediaShares;
  if (locus.participantsUrl != null) meeting.participantsUrl = locus.participantsUrl;
  if (locus.replaces != null) meeting.replaces = locus.replaces;
  if (locus.self != null) meeting.self = locus.self;
  if (locus.url != null) meeting.url = locus.url;
  if (locus.aclUrl != null) meeting.aclUrl = locus.aclUrl;

  // TODO (membership/ identities)
  if (locus.membership != null) meeting.membership = locus.membership;
  if (locus.identities != null) meeting.identities = locus.identities;
  console.log('updated the locus Object');

  if (locus.info) {
    console.log('Change in meeting Info');
  }

  if (locus.host) {
    console.log('change in host role');
  }

  if (locus.fullState) {
    console.log('change in full state');
  }

  if (locus.controls) {
    console.log('change in user control');
  }

  if (locus.participants) {
    console.log('change in participantlist');
  }

  if (locus.self) {
    console.log('change in the self object');
  }

  if (locus.mediaShares) {
    // TODO:  check if this is valid;
    console.log('media share update');
  }
  // Update Metrics
  // UpdateMeetingInfo ?? not sure if we need to
  // updatePstnStatus
  // updateParticipantList
  // updateMeetingStatus
  // update Meeting Controls
  // update share Status
  // Update DisplayHint ?  not sure if needed


  // Update latest sequence and syncUrl
  // // Update sequence
  // if (this.status !== MeetingConstants.meetingStatus.IDLE) {
  //   this.locus.sequence = deltaLocus.sequence;
  //   this.locus.syncUrl = deltaLocus.syncUrl;
  // }
};

export default Parser;
