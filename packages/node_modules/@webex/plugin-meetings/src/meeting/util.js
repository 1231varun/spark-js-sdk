import {isEmpty} from 'lodash';

import Media from '../media';

const MeetingUtil = {};

MeetingUtil.parseLocus = (response) => {
  const parsed = {};
  // First todo: add check for existance
  parsed.locus = response.body.locus;
  parsed.mediaConnections = response.body.mediaConnections;
  parsed.locusUrl = parsed.locus.url;
  parsed.locusId = parsed.locus.url.split('/').pop();
  parsed.selfId = parsed.locus.self.id;

  // we need mediaId before making roap calls
  parsed.mediaConnections.forEach((mediaConnection) => {
    if (mediaConnection.mediaId) {
      parsed.mediaId = mediaConnection.mediaId;
    }
  });
  return parsed;
};

MeetingUtil.remoteUpdateAudioVideo = (audio, video, meeting) => {
  if (meeting) {
    const localMedias = Media.generateLocalMedias(meeting.mediaId, audio, video);
    if (isEmpty(localMedias)) {
      return Promise.reject(new Error('You need a media id on the meeting to change remote audio.'));
    }
    return meeting.meetingRequest.remoteAudioVideoToggle({
      locusUrl: meeting.locusUrl,
      selfId: meeting.selfId,
      localMedias,
      deviceUrl: meeting.deviceUrl,
      correlationId: meeting.correlationId
    });
  }
  return Promise.reject(new Error('You need a meeting object.'));
};

MeetingUtil.leaveMeeting = (meeting) => {
  if (meeting) {
    return meeting.meetingRequest.leaveMeeting({
      locusUrl: meeting.locusUrl,
      selfId: meeting.selfId,
      correlationId: meeting.correlationId,
      resourceId: null,
      deviceUrl: meeting.deviceUrl
    });
  }
  return Promise.reject(new Error('You need a meeting object.'));
};

MeetingUtil.joinMeeting = (meeting) => {
  // TODO: check if the meeting is in JOINING state
  // if JOining state termintate the request as user might click multiple times
  console.log('meeting', meeting);
  if (meeting) {
    return meeting.meetingRequest
      .joinMeeting({
        sipUri: meeting.sipUri,
        deviceUrl: meeting.deviceUrl,
        locusUrl: meeting.locusUrl,
        correlationId: meeting.id
      })
      .then((res) =>
        // TODO: was thinking to have one function for parsing
        // all updates will give a locus object and we just need to
        // update the existing locus object and send events to the UI
        MeetingUtil.parseLocus(res))
      .catch((err) => {
        console.log('Meeting:index#joinMeeting --> Error joining the call on joinMeeting request, ', err);
        throw err;
      });
  }
  return Promise.reject(new Error('You need a meeting object.'));
};

export default MeetingUtil;
