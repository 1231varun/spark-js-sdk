import StateMachine from 'javascript-state-machine';
import StateMachineHistory from 'javascript-state-machine/lib/history';

import {MEETING_STATE} from '../constants';

const MeetingStateMachine = {
  /**
   * Initializes the StateMachine for the meeting
   * @param {Meeting} meeting A meeting instance
   * @returns {StateMachine}
   */
  create(meeting) {
    return new StateMachine({
      init: MEETING_STATE.STATES.IDLE,
      transitions: [
        {
          name: MEETING_STATE.TRANSITIONS.START,
          from: MEETING_STATE.STATES.IDLE,
          to: MEETING_STATE.STATES.ON_GOING
        },
        {
          name: MEETING_STATE.TRANSITIONS.START,
          from: MEETING_STATE.STATES.IDLE,
          to: MEETING_STATE.STATES.INCOMING
        },
        {
          name: MEETING_STATE.TRANSITIONS.JOIN,
          from: MEETING_STATE.STATES.IDLE,
          to: MEETING_STATE.STATES.DIALING
        },
        {
          name: MEETING_STATE.TRANSITIONS.JOIN,
          from: MEETING_STATE.STATES.ON_GOING,
          to: MEETING_STATE.STATES.DIALING
        },
        {
          name: MEETING_STATE.TRANSITIONS.JOIN,
          from: MEETING_STATE.STATES.INCOMING,
          to: MEETING_STATE.STATES.DIALING
        },
        {
          name: MEETING_STATE.TRANSITIONS.LOCAL,
          from: MEETING_STATE.STATES.DIALING,
          to: MEETING_STATE.STATES.CONNECTING_MEDIA_LOCAL
        },
        {
          name: MEETING_STATE.TRANSITIONS.CONNECT,
          from: MEETING_STATE.STATES.CONNECTING_MEDIA_LOCAL,
          to: MEETING_STATE.STATES.CONNECTING_MEDIA_REMOTE
        },
        {
          name: MEETING_STATE.TRANSITIONS.ESTABLISH,
          from: MEETING_STATE.STATES.CONNECTING_MEDIA_REMOTE,
          to: MEETING_STATE.STATES.ESTABLISHED_MEDIA
        },
        {
          name: MEETING_STATE.TRANSITIONS.LEAVE,
          from: MEETING_STATE.STATES.ESTABLISHED_MEDIA,
          to: MEETING_STATE.STATES.TERMINATING
        },
        {
          name: MEETING_STATE.TRANSITIONS.END,
          from: MEETING_STATE.STATES.TERMINATING,
          to: MEETING_STATE.STATES.ENDED
        },
        {
          name: MEETING_STATE.TRANSITIONS.CLEAN,
          from: MEETING_STATE.STATES.ENDED,
          to: MEETING_STATE.STATES.IDLE
        },
        {
          name: MEETING_STATE.TRANSITIONS.CLEAN,
          from: MEETING_STATE.STATES.ERROR,
          to: MEETING_STATE.STATES.IDLE
        },
        {
          name: MEETING_STATE.TRANSITIONS.ERROR,
          from: '*',
          to: MEETING_STATE.STATES.ERROR
        }
      ],
      methods: {
        onInit: (transition) => {
          meeting.logger.log(
            `Meeting:index#onInit->${transition.event} fired! State changed from '${transition.from}' to '${
              transition.to
            }' with transition '${transition.transition}' on Meeting Object: '${this.id}'.`
          );
        },
        onError: (transition) => {
          meeting.logger.log(
            `Meeting:index#onError->${transition.event} fired! State changed from '${transition.from}' to '${
              transition.to
            }' with transition '${transition.transition}' on Meeting Object: '${this.id}'.`
          );
        },
        onClean: (transition) => {
          meeting.logger.log(
            `Meeting:index#onClean->${transition.event} fired! State changed from '${transition.from}' to '${
              transition.to
            }' with transition '${transition.transition}' on Meeting Object: '${this.id}'.`
          );
        },
        onJoin: (transition) => {
          meeting.logger.log(
            `Meeting:index#onJoin->${transition.event} fired! State changed from '${transition.from}' to '${
              transition.to
            }' with transition '${transition.transition}' on Meeting Object: '${this.id}'.`
          );
        },
        onLocal: (transition) => {
          meeting.logger.log(
            `Meeting:index#onLocal->${transition.event} fired! State changed from '${transition.from}' to '${
              transition.to
            }' with transition '${transition.transition}' on Meeting Object: '${this.id}'.`
          );
        },
        onConnect: (transition) => {
          meeting.logger.log(
            `Meeting:index#onConnect->${transition.event} fired! State changed from '${transition.from}' to '${
              transition.to
            }' with transition '${transition.transition}' on Meeting Object: '${this.id}'.`
          );
        },
        onEstablish: (transition) => {
          meeting.logger.log(
            `Meeting:index#onEstablish->${transition.event} fired! State changed from '${transition.from}' to '${
              transition.to
            }' with transition '${transition.transition}' on Meeting Object: '${this.id}'.`
          );
        }
      },
      plugins: [new StateMachineHistory({max: 25})]
    });
  }
};

export default MeetingStateMachine;
