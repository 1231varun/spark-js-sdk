import {MEETINGS} from '../constants';

import MembersUtil from './util';

/**
 * @class MembersCollection
 */
export default class MembersCollection {
  namespace = MEETINGS;

  /**
   * @param {Object} locus
   * @memberof Members
   */
  constructor(locus) {
    this.members = null;
    this.hostId = null;
    this.userId = null;
    this.create(locus);
  }

  /**
   * @param {Object} locus - optional at create time, the initial join locus object to set up the members
   * @returns {Object} the MembersCollection once initialized
   * @memberof MembersCollection
   */
  create(locus) {
    if (!this.members) {
      this.initializeMembers();
    }
    if (locus) {
      this.hostId = MembersUtil.extractHostOwner(locus); // TODO:
      this.userId = MembersUtil.extractSelfUserId(locus); // TODO:
      MembersUtil.constructMembers(locus, this.members, this.userId, this.hostId);
    }
    return this.members;
  }

  /**
   * @returns {undefined}
   */
  initializeMembers() {
    this.members = {
      fullList: [],
      selfList: [],
      hostList: [],
      inLobbyList: [],
      inMeetingList: [],
      notInMeetingList: []
      // TODO: toAdmitList: [],
    };
  }

  /**
   * @param {Array} participants
   * @returns {Object} updated members
   */
  update(participants) {
    if (!participants) {
      return null;
    }
    const membersUpdate = {
      added: MembersUtil.extractAddedMembers(this.members, participants),
      removed: MembersUtil.extractRemovedMemmbers(this.members, participants),
      updated: MembersUtil.extractUpdatedMembers(this.members, participants)
    };
    return MembersUtil.putMembers(membersUpdate, this.members);
  }

  /**
   * @param {Object} locus
   * @returns {Object} refreshed complete list
   */
  refresh(locus) {
    if (!locus || !locus.participants) {
      return null;
    }
    this.initializeMembers();
    MembersUtil.constructMembers(locus, this.members, this.userId, this.hostId);
    return this.members;
  }

  /**
   * @returns {Object} returns an object map of Member instances
   * @memberof MembersCollection
   */
  getAll() {
    return this.members;
  }
}
