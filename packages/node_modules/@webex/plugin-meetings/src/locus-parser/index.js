
import {LOCUSEVENT} from '../constants';

const LocusParser = {};

LocusParser.parse = (meeting, data, meetings) => {
  const {eventType} = data;
  switch (eventType) {
    case LOCUSEVENT.PARTICIPANT_JOIN:
      // incoming call triggers this
      if (!meeting) {
        meetings.createMeetingByLocus(data.locus);
      }
    break 
    case LOCUSEVENT.PARTICIPANT_LEFT:
    case LOCUSEVENT.CONTROLS_UPDATED:
      console.log("participantJoinLeft");
    //   this.participantJoinLeft(data);
      break;

    case LOCUSEVENT.PARTICIPANT_AUDIO_MUTED:
    case LOCUSEVENT.PARTICIPANT_AUDIO_UNMUTED:
    case LOCUSEVENT.PARTICIPANT_VIDEO_MUTED:
    case LOCUSEVENT.PARTICIPANT_VIDE_UNMUTED:
      console.log('participantUpdated');
    //   LocusParser.participantUpdated(data);
      break;

    case LOCUSEVENT.SELF_CHANGED:
    case LOCUSEVENT.PARTICIPANT_UPDATED:
    case LOCUSEVENT.PARTICIPANT_CONTROLS_UPDATED:
    case LOCUSEVENT.PARTICIPANT_ROLES_UPDATED:
      console.log('participantUpdated');
    //   this.participantUpdated(data);
      break;

    case LOCUSEVENT.PARTICIPANT_DECLINED:
    //   this.participantDeclined(data);
      break;

    case LOCUSEVENT.DIFFERENCE:
      LocusParser.onDeltaLocus(data);
      break;

    case LOCUSEVENT.FLOOR_GRANTED:
    //   this.floorGranted(data);
      break;

    case LOCUSEVENT.FLOOR_RELEASED:
    //   this.floorReleased(data);
      break;

    default:
      LocusParser.onDeltaLocus(data);
  }
};

LocusParser.onDeltaLocus = () => {
  console.log('delta event');
};

export default LocusParser;
