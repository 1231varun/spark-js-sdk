

const FullState = {};

FullState.parse = (fullState) => ({
  type: fullState.type || 'UNKNOWN',
  meetingState: fullState.state,
  locked: fullState.locked
});


FullState.getFullState = (oldFullState, newFullState) => {
  const previous = oldFullState && FullState.parse(oldFullState);
  const current = newFullState && FullState.parse(newFullState);

  return {
    previous,
    current,
    updates: {
      isMeetingEnded: FullState.isMeetingEnded(previous, current),
      isMeetingTerminating: FullState.isMeetingTerminating(previous, current)
    }
  };
};

FullState.isMeetingEnded = (previous, current) => {
  if (current.state === 'INACTIVE' && previous &&
   (previous.state === 'ACTIVE' || previous.state === 'INITLIZATING' || previous.state === 'TERMINATING')) {
    return true;
  }

  return false;
};

FullState.isMeetingTerminating = (previous, current) => {
  if (current.state === 'TERMINATING' && previous &&
  (previous.state === 'ACTIVE' || previous.state === 'INITLIZATING')) {
    return true;
  }

  return false;
};

export default FullState;
