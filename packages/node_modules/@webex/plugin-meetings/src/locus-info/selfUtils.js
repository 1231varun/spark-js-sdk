/* globals spark */
import {IDLE, JOINED, SELF, OTHER, USER} from '../constants';

const selfUtils = {};

selfUtils.parse = (self) => {
  if (self) {
    return {
      muted: selfUtils.getMuted(self),
      guest: self.guest,
      moderator: self.moderator,
      mediaStatus: selfUtils.getStatus(self.status),
      state: self.state,
      // TODO: give a proper name . With same device as login or different login`
      // Some times we might have joined with both mobile and web
      joinedWith: selfUtils.checkJoinedStatus(self) ? SELF : OTHER,
      creator: self.isCreator // check if its used,
    };
  }
  return null;
};

selfUtils.getSelves = (oldSelf, newSelf) => {
  const previous = oldSelf && selfUtils.parse(oldSelf);
  const current = newSelf && selfUtils.parse(newSelf);
  return {
    previous,
    current,
    updates: {
      isUnadmittedGuest: selfUtils.isUnadmittedGuest(current),
      isAdmittedGuest: selfUtils.isAdmittedGuest(previous, current)
    }
  };
};

selfUtils.getMuted = (self) => {
  const controls = {self};
  let audio = null;
  let muted = null;
  if (controls) {
    audio = {controls};
    if (audio) {
      muted = {audio};
    }
  }
  return muted;
};

/**
 * returns true of false if this device has joined the meeting
 * @param {boolen} self  true
 * @returns {boolen} return true if you have joined the meeting
 */
selfUtils.checkJoinedStatus = (self) => {
  // Device you logged in with
  const selfDeviceUrl = spark.internal.device.url;
  return self.devices.some((device) => selfDeviceUrl === device.Url);
};

selfUtils.getStatus = (status) => ({
  audio: status.audioStatus,
  video: status.videoStatus,
  slides: status.videoSlidesStatus
});

selfUtils.isLocusGuestUnadmitted = (check) => check && check.guest && check.state === IDLE;

selfUtils.isLocusGuestAdmitted = (check) => check && check.guest && check.state === JOINED;

selfUtils.isUnadmittedGuest = (self) => {
  if (!self) {
    throw new TypeError('self must be defined to determine if self is unadmitted as guest.');
  }
  return selfUtils.isLocusGuestUnadmitted(self);
};

selfUtils.isAdmittedGuest = (oldSelf, changedSelf) => {
  if (!oldSelf) {
    // if there was no previous locus, it couldn't have been admitted yet
    return false;
  }
  if (!changedSelf) {
    throw new TypeError('New self must be defined to determine if self transitioned to admitted as guest.');
  }
  return selfUtils.isLocusGuestUnadmitted(oldSelf) && selfUtils.isLocusGuestAdmitted(changedSelf);
};

selfUtils.getSipUrl = (self, participants, info) => {
  const partner = participants.find((participant) =>
    (self && participant.identity !== self.identity)
    && (participants.length <= 2 || (participant.type === USER && !participant.removed)));

  // For webex meeting the sipUrl gets updated in info parser
  if (partner && info.type === 'ONE_ON_ONE') {
    return {sipUri: partner.person.sipUrl || partner.person.emailAddress || partner.person.email};
  }
  return info.sipUri;
};


export default selfUtils;
