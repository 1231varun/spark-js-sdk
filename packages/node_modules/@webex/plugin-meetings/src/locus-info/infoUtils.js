
// import {_CALL_, _MEETING_, _MEETING_CENTER_, WEBEX_MEETING, UNKNOWN} from '../constants';

const InfoUtils = {};

InfoUtils.parse = (info) => ({
  policy: InfoUtils.parsePolicy(info),
  // type: InfoUtils.parseMeetingType(info),
  sipUri: info.sipUri
});
InfoUtils.parsePolicy = (info) => {
  const policy = {};
  // Parses the policy to show valid uses
  if (info.displayHints && info.displayHints.joined && info.displayHints.joined.length > 0) {
    // TODO: find a better way
    info.displayHints.joined.forEach((key) => {
      policy[key] = true;
    });
  }
  return policy;
};

// InfoUtils.parseMeetingType = (info) => {
//   let type = UNKNOWN;
//   // Parse all the value and get the type of meeting
//   // 1:1 meeting
//   if (info.locusTags && info.locusTags.indexOf(ONE_ON_ONE) >= 0 || info.maxParticipants === 3) {
//     return _CALL_;
//   }
//   if (info.locusTags && info.locusTags.indexOf(_MEETING_) >= 0) {
//     type = _MEETING_;
//   }
//   // For webex meeting claimed or unclaimed or calender meeting with webex site
//   if (info.webexServiceType === _MEETING_CENTER_ || info.isPmr) {
//     return WEBEX_MEETING;
//   }
//   return type;
// };

export default InfoUtils;
