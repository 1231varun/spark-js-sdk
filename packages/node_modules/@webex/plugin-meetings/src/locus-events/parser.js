import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import Parser from '../locus-Info/parser';
import {MEETINGS, LOCUSEVENT, LOCUS_ID, DELTAEVENT} from '../constants';


/**
 * @class LocusParser
 */
export default class LocusParser extends StatelessSparkPlugin {
  namespace = MEETINGS;


  onDeltaLocus(locus, meeting) {
    console.log('Its a delta event');
    let res;
    if (!meeting) {
    // check for the existing meeting object
      console.log('meeting object not present');
      console.log('Locus Url present ', locus.locusUrl);
      //  res = meeting.updateWithDeltaLocus(locus, true);
    }
    else {
      res = Parser.updateWithDeltaLocus(locus, meeting);
    }

    /* istanbul ignore else */
    if (res === DELTAEVENT.GT
      || res === DELTAEVENT.CF) {
      // TODO:  there is a change emit and event
    }
    // console.log(`LOCUS DELTA EVENT ${data}`);
  }

  parse(meeting, data) {
    const {eventType} = data;
    switch (eventType) {
      case LOCUSEVENT.PARTICIPANT_JOIN:
        // incoming call triggers this
        if (!meeting) {
          this.spark.meetings.create(data.locus, LOCUS_ID);
        }
        break;
      case LOCUSEVENT.PARTICIPANT_LEFT:
        console.log('participant-LEFT', eventType);
        break;
      case LOCUSEVENT.CONTROLS_UPDATED:
        console.log('participant-CONTROLS_UPDATED', eventType);
        break;

      case LOCUSEVENT.PARTICIPANT_AUDIO_MUTED:
        console.log('participant-AUDIO_MUTED', eventType);
        break;
      case LOCUSEVENT.PARTICIPANT_AUDIO_UNMUTED:
        console.log('participant-AUDIO_UNMUTED', eventType);
        break;
      case LOCUSEVENT.PARTICIPANT_VIDEO_MUTED:
        console.log('participant-VIDEO_MUTED', eventType);
        break;
      case LOCUSEVENT.PARTICIPANT_VIDEO_UNMUTED:
        console.log('participant-VIDEO_UNMUTED', eventType);
        break;

      case LOCUSEVENT.SELF_CHANGED:
        console.log('participant-SELF_CHANGED', eventType);
        break;
      case LOCUSEVENT.PARTICIPANT_UPDATED:
        console.log('participant-PARTICIPANT_UPDATED', eventType);
        break;
      case LOCUSEVENT.PARTICIPANT_CONTROLS_UPDATED:
        console.log('participant-CONTROLS_UPDATED', eventType);
        break;
      case LOCUSEVENT.PARTICIPANT_ROLES_UPDATED:
        console.log('participant-ROLES_UPDATED', eventType);
        break;

      case LOCUSEVENT.PARTICIPANT_DECLINED:
        console.log('participant_DECLINED', eventType);
        //   this.participantDeclined(data);
        break;

      case LOCUSEVENT.DIFFERENCE:
        this.onDeltaLocus(data.locus, meeting);
        break;

      case LOCUSEVENT.FLOOR_GRANTED:
        console.log('floorGranted', eventType);
        //   this.floorGranted(data);
        break;

      case LOCUSEVENT.FLOOR_RELEASED:
        console.log('floorReleased', eventType);
        //   this.floorReleased(data);
        break;

      default:
        this.onDeltaLocus(data.locus, meeting);
    }
  }
}
