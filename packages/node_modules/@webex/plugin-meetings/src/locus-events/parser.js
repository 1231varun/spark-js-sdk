import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {MEETINGS, LOCUSEVENT} from '../constants';

/**
 * @class LocusParser
 */
export default class LocusParser extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  constructor(attrs, options) {
    super({}, options);
  }

  parse(meeting, data) {
    const {eventType} = data;
    switch (eventType) {
      case LOCUSEVENT.PARTICIPANT_JOIN:
        // incoming call triggers this
        if (!meeting) {
          this.spark.meetings.createMeetingByLocus(data.locus);
        }
        break;
      case LOCUSEVENT.PARTICIPANT_LEFT:
      case LOCUSEVENT.CONTROLS_UPDATED:
        console.log('participantJoinLeft');
        //   this.participantJoinLeft(data);
        break;

      case LOCUSEVENT.PARTICIPANT_AUDIO_MUTED:
      case LOCUSEVENT.PARTICIPANT_AUDIO_UNMUTED:
      case LOCUSEVENT.PARTICIPANT_VIDEO_MUTED:
      case LOCUSEVENT.PARTICIPANT_VIDEO_UNMUTED:
        console.log('participantUpdated');
        //   LocusParser.participantUpdated(data);
        break;

      case LOCUSEVENT.SELF_CHANGED:
      case LOCUSEVENT.PARTICIPANT_UPDATED:
      case LOCUSEVENT.PARTICIPANT_CONTROLS_UPDATED:
      case LOCUSEVENT.PARTICIPANT_ROLES_UPDATED:
        console.log('participantUpdated');
        //   this.participantUpdated(data);
        break;

      case LOCUSEVENT.PARTICIPANT_DECLINED:
      //   this.participantDeclined(data);
        break;

      case LOCUSEVENT.DIFFERENCE:
        LocusParser.onDeltaLocus(data);
        break;

      case LOCUSEVENT.FLOOR_GRANTED:
      //   this.floorGranted(data);
        break;

      case LOCUSEVENT.FLOOR_RELEASED:
      //   this.floorReleased(data);
        break;

      default:
        this.onDeltaLocus(data);
    }
  }

  parseDelta(data) {
    console.log(`LOCUS DELTA EVENT ${data}`);
  }
}
