import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {MEETINGS, LOCUSEVENT, LOCUS_URL, ROAP, CORRELATION_ID} from '../constants';
import Meetings from '../meetings';
import LocusParser from '../locus-Info/parser';

/**
 * @class LocusEvents
 */
export default class LocusEvents extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  constructor(attrs, options) {
    super({}, options);
    this.parser = new LocusParser({}, options);
  }

  /**
   * @param {Object} data
   * @returns {undefined}
   * @memberof LocusEvents
   */
  locusEvent(data) {
    const {eventType} = data;
    console.log('Mercury-Locus-Event', eventType);
    if (eventType === LOCUSEVENT.MESSAGE_ROAP) {
      return;
    }
    const meeting = Meetings.getMeetingByType(LOCUS_URL, data.locusUrl);
    this.parser.parse(meeting, data);
  }


  roapEvent(data) {
    const {eventType} = data;
    if (eventType !== LOCUSEVENT.MESSAGE_ROAP) {
      return;
    }
    const meeting = Meetings.getMeetingByType(CORRELATION_ID, data.correlationId);
    if (meeting) {
      meeting.roap.roapEvent(data);
    }
    else {
      console.log('Roap event not present');
      // TODO: shouldnt happen in a happy path
    }
  }

  /**
   * @returns {undefined}
   * @memberof LocusEvents
   */
  start() {
    this.spark.internal.mercury.on(LOCUSEVENT.LOCUS_MERCURY, (envelope) => {
      this.locusEvent(envelope.data);
    });

    this.spark.internal.mercury.on(ROAP.ROAP_MERCURY, (envelope) => {
      this.roapEvent(envelope.data);
    });
  }

  stop() {
    // TODO:  stop mercury when we logout
  }
}
