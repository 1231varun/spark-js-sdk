import {keys, isFinite} from 'lodash';

import {DEFAULT_EXCLUDED_AGGREGATION_STATS} from '../constants';

const StatsCalculator = {};

StatsCalculator.interval = (previous, updated) => {
  if (!previous || keys(previous.data).length === 0) {
    return updated;
  }
  const interval = {};
  keys(updated.data).forEach((key) => {
    interval[key] = interval[key] ? interval[key] : {};
    keys(updated.data[key]).forEach((stat) => {
      let value = updated.data[key][stat];
      if (isFinite(value) && !(DEFAULT_EXCLUDED_AGGREGATION_STATS.includes(stat) && value !== 0)) {
        if (!previous.data[key] || !previous.data[key][stat]) {
          interval[key][stat] = value;
        }
        else {
          value -= previous.data[key][stat];
          interval[key][stat] = value;
        }
      }
    });
  });
  return interval;
};

StatsCalculator.aggregate = (data, summary) => {
  const aggregate = summary;
  keys(data.data).forEach((key) => {
    keys(data.data[key]).forEach((stat) => {
      const value = data.data[key][stat];
      if (isFinite(value) && !(DEFAULT_EXCLUDED_AGGREGATION_STATS.includes(stat) && value !== 0)) {
        if (aggregate[key][stat]) {
          aggregate[key][stat] += value;
        }
        else {
          aggregate[key][stat] = value;
        }
      }
    });
  });
  return aggregate;
};

export default StatsCalculator;
