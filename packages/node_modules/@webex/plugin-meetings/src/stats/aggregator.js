import {keys, isFinite} from 'lodash';

import {DEFAULT_TRANSFORM_KEYS, DEFAULT_STATS_HISTORY_MAX, DEFAULT_EXCLUDED_AGGREGATION_STATS} from '../constants';

/**
 * simply adds up the properties from filtered stream data
 */
export default class StatsAggregator {
  /**
   * @private
   * @param {Object} options
   */
  constructor(options = {format: DEFAULT_TRANSFORM_KEYS}) {
    this.summary = {};
    options.format.forEach((key) => {
      this.summary[key] = {};
    });
    this.history = [];
  }

  getSummary() {
    return this.summary;
  }

  getHistory() {
    return this.history;
  }

  clearSummary() {
    delete this.summary;
    this.summary = {};
  }

  clearHistory() {
    delete this.history;
    this.history = [];
  }

  addHistory(data) {
    let removed;
    if (this.history.length >= DEFAULT_STATS_HISTORY_MAX) {
      removed = this.history.pop();
    }
    this.history.unshift(data);
    return removed;
  }

  aggregate(data) {
    this.addHistory(data.data);
    keys(data.data).forEach((key) => {
      keys(data.data[key]).forEach((stat) => {
        const value = data.data[key][stat];
        if (isFinite(value) && !(DEFAULT_EXCLUDED_AGGREGATION_STATS.includes(stat) && value !== 0)) {
          if (this.summary[key][stat]) {
            this.summary[key][stat] += value;
          }
          else {
            this.summary[key][stat] = value;
          }
        }
      });
    });
  }
}
