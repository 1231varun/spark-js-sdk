import uuid from 'uuid';
import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {MEETINGS} from '../constants';
import StatsHistory from '../stats/history';
import StatsAggregator from '../stats/aggregator';
import StatsInterval from '../stats/interval';
import StatsStream from '../stats/stream';
import StatsFilter from '../stats/filter';

/**
 * @class MeetingInfo
 */
export default class MeetingStats extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  constructor(attrs, options) {
    super({}, options);
    this.meetingStatsMediaHistory = undefined;
    this.meetingStatsMediaInterval = undefined;
    this.meetingStatsMediaAggregator = undefined;
    this.meetingStatsScreenHistory = undefined;
    this.meetingStatsScreenInterval = undefined;
    this.meetingStatsScreenAggregator = undefined;
    this.meetingStatsMediaStream = undefined;
    this.meetingStatsMediaFilter = undefined;
    this.meetingStatsScreenStream = undefined;
    this.meetingStatsScreenFilter = undefined;
    this.id = undefined;
  }

  doOnMediaData(cbFn) {
    if (!this.meetingStatsMediaFilter) {
      throw new Error('The media stats peer connection filter must be set up before data can be worked upon.');
    }
    this.meetingStatsMediaFilter.on('data', (filtered) => {
      if (this.meetingStatsMediaHistory) {
        this.meetingStatsMediaHistory.addHistory(filtered);
      }
      if (this.meetingStatsMediaInterval) {
        this.meetingStatsMediaInterval.updateInterval(filtered);
      }
      if (this.meetingStatsMediaAggregator) {
        this.meetingStatsMediaAggregator.aggregate(filtered);
      }
      cbFn(filtered);
    });
  }

  doOnScreenData(cbFn) {
    if (!this.meetingStatsScreenFilter) {
      throw new Error('The screen stats peer connection filter must be set up before data can be worked upon.');
    }
    this.meetingStatsMediaFilter.on('data', (filtered) => {
      if (this.meetingStatsScreenHistory) {
        this.meetingStatsScreenHistory.addHistory(filtered);
      }
      if (this.meetingStatsScreenInterval) {
        this.meetingStatsScreenInterval.updateInterval(filtered);
      }
      if (this.meetingStatsScreenggregator) {
        this.meetingStatsScreenAggregator.aggregate(filtered);
      }
      cbFn(filtered);
    });
  }

  withMediaHistory() {
    const history = new StatsHistory();
    this.setMediaHistory(history);
    return this;
  }

  withMediaAggregator() {
    const aggregator = new StatsAggregator();
    this.setMediaAggregator(aggregator);
    return this;
  }

  withMediaInterval() {
    const interval = new StatsInterval();
    this.setMediaInterval(interval);
    return this;
  }

  withScreenHistory() {
    const history = new StatsHistory();
    this.setScreenHistory(history);
    return this;
  }

  withScreenAggregator() {
    const aggregator = new StatsAggregator();
    this.setScreenAggregator(aggregator);
    return this;
  }

  withScreenInterval() {
    const interval = new StatsInterval();
    this.setScreenInterval(interval);
    return this;
  }

  withMediaStream(pc) {
    const stream = new StatsStream(pc);
    this.setMediaStream(stream);
    return this;
  }

  withMediaFilter(pc) {
    const stream = new StatsStream(pc);
    this.setMediaStream(stream);
    const filter = new StatsFilter();
    this.setMediaFilter(filter);
    stream.pipe(filter);
    return this;
  }

  withScreenStream(pc) {
    const stream = new StatsStream(pc);
    this.setScreenStream(stream);
    return this;
  }

  withScreenFilter(pc) {
    const stream = new StatsStream(pc);
    this.setScreenStream(stream);
    const filter = new StatsFilter();
    this.setScreenFilter(filter);
    stream.pipe(filter);
    return this;
  }

  withId(id) {
    if (id) {
      this.setId(id);
      return this;
    }
    const guid = uuid.v4();
    this.setId(guid);
    return this;
  }

  build() {
    return this;
  }

  setId(id) {
    this.id = id;
  }

  setMediaHistory(history) {
    this.meetingStatsMediaHistory = history;
  }

  setMediaInterval(interval) {
    this.meetingStatsMediaInterval = interval;
  }

  setMediaAggregator(aggregator) {
    this.meetingStatsMediaAggregator = aggregator;
  }

  setScreenHistory(history) {
    this.meetingStatsScreenHistory = history;
  }

  setScreenInterval(interval) {
    this.meetingStatsScreenInterval = interval;
  }

  setScreenAggregator(aggregator) {
    this.meetingStatsScreenAggregator = aggregator;
  }

  setMediaStream(stream) {
    this.meetingStatsMediaStream = stream;
  }

  setMediaFilter(filter) {
    this.meetingStatsMediaFilter = filter;
  }

  setScreenStream(stream) {
    this.meetingStatsStream = stream;
  }

  setScreenFilter(filter) {
    this.meetingStatsFilter = filter;
  }

  getId() {
    return this.id;
  }

  getMediaHistory() {
    return this.meetingStatsMediaHistory;
  }

  getMediaInterval() {
    return this.meetingStatsMediaInterval;
  }

  getMediaAggregator() {
    return this.meetingStatsMediaAggregator;
  }

  getScreenHistory() {
    return this.meetingStatsScreenHistory;
  }

  getScreenInterval() {
    return this.meetingStatsScreenInterval;
  }

  getScreenAggregator() {
    return this.meetingStatsScreenAggregator;
  }

  getMediaStream() {
    return this.meetingStatsMediaStream;
  }

  getMediaFilter() {
    return this.meetingStatsMediaFilter;
  }

  getScreenStream() {
    return this.meetingStatsScreenStream;
  }

  getScreenFilter() {
    return this.meetingStatsScreenFilter;
  }
}
