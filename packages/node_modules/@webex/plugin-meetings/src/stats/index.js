import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {MEETINGS} from '../constants';
import MeetingStats from '../stats/stats';

/**
 * @class WebRTCStats
 */
export default class WebRTCStats extends StatelessSparkPlugin {
    namespace = MEETINGS;

    /**
    *
    * @param {Object} attrs
    * @param {Object} options
    * @param {Object} optionalCreateOptions
    * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.audioSender
    * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.audioReceiver
    * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.videoSender
    * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.videoReceiver
    * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.shareSender
    * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.shareReceiver
   */
    constructor(attrs, options, optionalCreateOptions) {
      super({}, options);
      this.attrs = attrs;
      this.options = options;
      this.audioSender = null;
      this.audioReceiver = null;
      this.videoSender = null;
      this.videoReceiver = null;
      this.shareSender = null;
      this.shareReceiver = null;
      if (optionalCreateOptions) {
        if (optionalCreateOptions.audioSender) {
          this.withAudioSender(optionalCreateOptions.audioSender);
        }
        if (optionalCreateOptions.audioReceiver) {
          this.withAudioReceiver(optionalCreateOptions.audioReceiver);
        }
        if (optionalCreateOptions.videoSender) {
          this.withVideoSender(optionalCreateOptions.videoSender);
        }
        if (optionalCreateOptions.videoReceiver) {
          this.withVideoReceiver(optionalCreateOptions.videoReceiver);
        }
        if (optionalCreateOptions.shareSender) {
          this.withShareSender(optionalCreateOptions.shareSender);
        }
        if (optionalCreateOptions.shareReceiver) {
          this.withShareReceiver(optionalCreateOptions.shareReceiver);
        }
      }
    }

    /**
   * @returns {WebRTCStats}
   */
    build() {
      return this;
    }

    /**
   * constructs a MeetingStats object on this instance for media stream
   * @param {Object} options - optional, see MeetingStats options
   * @returns {WebRTCStats}
   */
    withAudioSender(options) {
      this.setAudioSender(new MeetingStats(this.attrs, this.options, options));

      return this;
    }

    withVideoReceiver(options) {
      this.setVideoReceiver(new MeetingStats(this.attrs, this.options, options));

      return this;
    }

    /**
   * constructs a MeetingStats object on this instance for media stream
   * @param {Object} options - optional, see MeetingStats options
   * @returns {WebRTCStats}
   */
    withAudioReceiver(options) {
      this.setAudioReceiver(new MeetingStats(this.attrs, this.options, options));

      return this;
    }

    withVideoSender(options) {
      this.setVideoSender(new MeetingStats(this.attrs, this.options, options));

      return this;
    }

    /**
   * constructs a MeetingStats object on this instance for media stream
   * @param {Object} options - optional, see MeetingStats options
   * @returns {WebRTCStats}
   */
    withShareReceiver(options) {
      this.setShareReceiver(new MeetingStats(this.attrs, this.options, options));

      return this;
    }

    withShareSender(options) {
      this.setShareSender(new MeetingStats(this.attrs, this.options, options));

      return this;
    }

    /**
   * @returns {MeetingStats}
   */
    getAudioSender() {
      return this.audioSender;
    }

    getVideoReceiver() {
      return this.videoReceiver;
    }

    /**
   * @returns {MeetingStats}
   */
    getAudioReceiver() {
      return this.audioReceiver;
    }

    getVideoSender() {
      return this.videoSender;
    }

    /**
   * @returns {MeetingStats}
   */
    getShareSender() {
      return this.shareSender;
    }

    getShareReceiver() {
      return this.shareReceiver;
    }

    setAudioSender(audioSender) {
      this.audioSender = audioSender;
    }

    setAudioReceiver(audioReceiver) {
      this.audioReceiver = audioReceiver;
    }

    setVideoSender(videoSender) {
      this.videoSender = videoSender;
    }

    setVideoReceiver(videoReceiver) {
      this.videoReceiver = videoReceiver;
    }

    setShareSender(shareSender) {
      this.shareSender = shareSender;
    }

    setShareReceiver(shareReceiver) {
      this.shareReceiver = shareReceiver;
    }
}
