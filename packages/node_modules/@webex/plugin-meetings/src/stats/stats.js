import uuid from 'uuid';

import {MEETINGS} from '../constants';
import StatsHistory from '../stats/history';
import StatsAggregator from '../stats/aggregator';
import StatsInterval from '../stats/interval';
import StatsStream from '../stats/stream';
import StatsFilter from '../stats/filter';

/**
 * @class MeetingStats
 */
export default class MeetingStats {
  namespace = MEETINGS;

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  constructor() {
    this.history = undefined;
    this.interval = undefined;
    this.aggregator = undefined;
    this.stream = undefined;
    this.filter = undefined;
    this.id = undefined;
  }

  doHistory(data) {
    if (this.history) {
      this.history.addHistory(data);
    }
  }

  doInterval(data) {
    if (this.interval) {
      this.interval.updateInterval(data);
    }
  }

  doAggregator(data) {
    if (this.aggregator) {
      this.aggregator.aggregate(data);
    }
  }

  doData(cbFn) {
    if (!this.filter) {
      throw new Error('The stats peer connection filter must be set up before data can be worked upon.');
    }
    this.filter.on('data', (filtered) => {
      this.doHistory(filtered);
      this.doInterval(filtered);
      this.doAggregator(filtered);
      if (cbFn) {
        cbFn(filtered);
      }
    });
  }

  withHistory() {
    const history = new StatsHistory();
    this.setHistory(history);
    return this;
  }

  withAggregator() {
    const aggregator = new StatsAggregator();
    this.setAggregator(aggregator);
    return this;
  }

  withInterval() {
    const interval = new StatsInterval();
    this.setInterval(interval);
    return this;
  }

  withStream(pc) {
    const stream = new StatsStream(pc);
    this.setStream(stream);
    return this;
  }

  withFilter(pc) {
    if (!pc) {
      throw new Error('The filter must be set up with a PeerConnection object.');
    }
    const stream = new StatsStream(pc);
    this.setStream(stream);
    const filter = new StatsFilter();
    this.setFilter(filter);
    stream.pipe(filter);
    return this;
  }

  withId(id) {
    if (id) {
      this.setId(id);
      return this;
    }
    const guid = uuid.v4();
    this.setId(guid);
    return this;
  }

  build() {
    return this;
  }

  setId(id) {
    this.id = id;
  }

  setHistory(history) {
    this.history = history;
  }

  setInterval(interval) {
    this.interval = interval;
  }

  setAggregator(aggregator) {
    this.aggregator = aggregator;
  }

  setStream(stream) {
    this.stream = stream;
  }

  setFilter(filter) {
    this.filter = filter;
  }

  getId() {
    return this.id;
  }

  getHistory() {
    return this.history;
  }

  getInterval() {
    return this.interval;
  }

  getAggregator() {
    return this.aggregator;
  }

  getStream() {
    return this.stream;
  }

  getFilter() {
    return this.filter;
  }
}
