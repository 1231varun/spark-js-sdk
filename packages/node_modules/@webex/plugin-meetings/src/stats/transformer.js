import {keys, find, forEach} from 'lodash';

import {DEFAULT_TRANSFORM_REGEX, DEFAULT_GET_STATS_FILTER} from '../constants';

const StatsTransformer = {};

StatsTransformer.simplify = (stat) => find(keys(DEFAULT_TRANSFORM_REGEX), (key) => {
  let value = (DEFAULT_TRANSFORM_REGEX[key].regex.test(stat.id) ? key : false);
  if (value) {
    if (DEFAULT_TRANSFORM_REGEX[value].profiler) {
      if (!((stat[DEFAULT_TRANSFORM_REGEX[value].profiler.type].includes(DEFAULT_TRANSFORM_REGEX[value].profiler.value))
      && (value.toLowerCase().includes(DEFAULT_TRANSFORM_REGEX[value].profiler.value)))) {
        value = false;
        return value;
      }
    }
    if (DEFAULT_TRANSFORM_REGEX[value].decider) {
      if (stat[DEFAULT_TRANSFORM_REGEX[value].decider] !== DEFAULT_TRANSFORM_REGEX[value].selector) {
        value = false;
        return value;
      }
    }
  }
  return value;
});

StatsTransformer.parse = (report) => {
  const target = {};
  // from the stats object
  // get the rtc stats report
  if (report && report.forEach && report.size > 0) {
    report.forEach((stat) => {
      // each report has internal data
      if (stat && stat.type) {
        // pull only certain types
        if (DEFAULT_GET_STATS_FILTER.types.includes(stat.type)) {
          // insert into the target the statistic mapped to it's statical id
          target[stat.id] = stat;
        }
      }
    });
  }
  return target;
};

StatsTransformer.convert = (parsed, options) => {
  if (options.simplifyFn) {
    return options.simplifyFn(parsed);
  }
  const target = {};
  forEach(parsed, (stat) => {
    const key = StatsTransformer.simplify(stat);
    if (key) {
      target[key] = stat;
    }
  });
  return target;
};

StatsTransformer.transform = (report, options = {simplifyFn: undefined}) => {
  let data;
  const parsed = StatsTransformer.parse(report);
  if (DEFAULT_TRANSFORM_REGEX) {
    data = StatsTransformer.convert(parsed, options);
  }
  else {
    data = parsed;
  }
  return data;
};
export default StatsTransformer;
