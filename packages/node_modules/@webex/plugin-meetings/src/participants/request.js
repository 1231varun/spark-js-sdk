import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {MEETINGS} from '../constants';

import ParticipantUtil from './util';
/**
 * @class ParticipantRequest
 */
export default class ParticipantRequest extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   *
   * @param {Object} options with format of {invitee: string, locusUrl: string}
   * @returns {Promise}
   * @throws {Error} if the options are not valid and complete, must have invitee with emailAddress OR email AND locusUrl
   * @memberof ParticipantRequest
   */
  addParticipant(options) {
    if (!(!options || !options.invitee || (!options.invitee.emailAddress || !options.invitee.email) || !options.locusUrl)) {
      throw new Error('invitee must be passed and the associated locus url for this meeting object must be defined.');
    }
    const requestParams = ParticipantUtil.getAddParticipantRequestParams(options);
    return this.request(requestParams);
  }

  /**
   *
   * @param {Object} options
   * @returns {Promise}
   * @throws {Error} if the options are not valid and complete, must have participantIds AND locusUrl
   * @memberof ParticipantRequest
   */
  admitParticipant(options) {
    if (!options || !options.locusUrl || !options.participantIds) {
      throw new Error('participantIds must be an array passed and the associated locus url for this meeting object must be defined.');
    }
    const requestParams = ParticipantUtil.getAdmitParticipantRequestParams(options);
    return this.request(requestParams);
  }
}
