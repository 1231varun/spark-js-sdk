import ParticipantUtil from './util';

const ParticipantCollection = {
  participants: {},

  /**
   * @param {*} locus the initial join locus object to set up the participants
   * @returns {Object} the ParticipantCollection once initialized
   * @memberof ParticipantCollection
   */
  create(locus) {
    this.participants = {
      selfList: [],
      hostList: [],
      inLobbyList: [],
      inMeetingList: [],
      notInMeetingList: []
      // TODO: toAdmitList: [],
    };
    if (locus) {
      const hostId = ParticipantUtil.extractHostOwner(locus);
      const userId = ParticipantUtil.extractSelfUserId(locus);
      ParticipantUtil.constructParticipants(locus, this.participants, userId, hostId);
    }
    return this.participants;
  },

  /**
   * @param {String} id ID of the participant in the meeting you wish to retrieve
   * @returns {Participant} returns a participant instance
   * @memberof ParticipantCollection
   */
  get(id) {
    if (this.participants[id]) {
      return this.participants[id];
    }
    return null;
  },

  /**
   * @param {String} id ID of the participant in the meeting you wish to remove
   * @returns {Participant} returns the removed participant
   * @memberof ParticipantCollection
   */
  remove(id) {
    const participant = this.get(id);
    delete this.participants[id];
    return participant;
  },

  /**
   * @param {String} id ID of the participant in the meeting you wish to add
   * @param {Participant} participant the full meeting info object
   * @returns {Participant} returns the participant instance that was added to the collection
   * @memberof ParticipantCollection
   */
  set(id, participant) {
    this.participants[id] = participant;
    return this.participants[id];
  },

  /**
   * @returns {Object} returns an object map of Participant instances
   * @memberof ParticipantCollection
   */
  getAll() {
    return this.participants;
  }
};

export default ParticipantCollection;
