import {PUT, CONTROLS} from '../constants';

const ParticipantUtil = {};

/**
 * @param {Object} invitee with emailAddress or email
 * @param {String} locusUrl
 * @param {Boolean} alertIfActive
 * @returns {Object} the format object
 */
ParticipantUtil.generateAddParticipantOptions = (invitee, locusUrl, alertIfActive) => ({
  invitee,
  locusUrl,
  alertIfActive
});

/**
 * @param {Array} participantIds
 * @param {String} locusUrl
 * @returns {Object} the format object
 */
ParticipantUtil.generateAdmitParticipantOptions = (participantIds, locusUrl) => ({
  locusUrl,
  participantIds
});

/**
 * @param {Object} options with {invitee: {emailAddress, email}, alertIfActive}
 * @returns {Object} with {invitees: [{address}], alertIfActive}
 */
ParticipantUtil.getAddParticipantBody = (options) => ({
  invitees: [
    {
      address: options.invitee.emailAddress || options.invitee.email
    }
  ],
  alertIfActive: options.alertIfActive
});

/**
 * @param {Object} options with {participantIds}
 * @returns {Object} admit with {participantIds}
 */
ParticipantUtil.getAdmitParticipantRequestBody = (options) => ({
  admit: {participantIds: options.participantIds}
});

/**
 * @param {Object} format with {participantIds, locusUrl}
 * @returns {Object} the request parameters (method, uri, body) needed to make a admitParticipant request
 */
ParticipantUtil.getAdmitParticipantRequestParams = (format) => {
  const body = ParticipantUtil.getAdmitParticipantRequestBody(format);
  return {
    method: PUT,
    uri: `${format.locusUrl}/${CONTROLS}`,
    body
  };
};

/**
 * @param {Object} format with {invitee {emailAddress, email}, locusUrl, alertIfActive}
 * @returns {Object} the request parameters (method, uri, body) needed to make a addParticipant request
 */
ParticipantUtil.getAddParticipantRequestParams = (format) => {
  const body = ParticipantUtil.getAddParticipantBody(format);
  const requestParams = {
    method: PUT,
    uri: format.locusUrl,
    body
  };
  return requestParams;
};

export default ParticipantUtil;
