/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */
import '@ciscospark/internal-plugin-mercury';

import {SparkPlugin} from '@ciscospark/spark-core';

import {MEETINGS} from '../constants';
import MeetingInfo from '../meeting-info';
import Meeting from '../meeting';
import PersonalMeetingRoom from '../personal-meeting-room';

import MeetingCollection from './collection';

/**
 * Maintain a cache of meetings and sync with services.
 * Developers should not have to worry about syncing.
 *
 * Events to emit
 * ==============
 *
 * - create
 * - ready
 * - statusChange: {
 *   connection (string): connecting | connected | disconnecting | disconnected
 *   // NOTE: /calls API had: initializing |lobby | connected | terminating | disconnected
 * }
 * @class
 */
export default class Meetings extends SparkPlugin {
  namespace = MEETINGS;

  /**
   * Initializes the Meetings Plugin
   *
   * @returns {null}
   */
  constructor(...args) {
    super(...args);
    this.meetingInfo = new MeetingInfo({}, {parent: this.spark});
    this.personalMeetingRoom = new PersonalMeetingRoom({}, {parent: this.spark});
  }

  /**
   * gets the personal meeting room instance, for saved PMR values for this user
   * @returns {PersonalMeetingRoom}
   */
  getPersonalMeetingRoom() {
    return this.personalMeetingRoom;
  }

  /**
   * Create a meeting.
   *
   * In current nomenclature, this would create a `call`.
   * `spaceID` is used in {https://github.com/webex/spark-js-sdk/blob/master/packages/node_modules/@ciscospark/plugin-phone/src/call.js#L1007 `call.dial`}
   * @param {string} destination - {https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/voice/cube/configuration/cube-book/sip-supp-uri-based-dialing.html sipURL} or spaceID, AKA {https://developer.webex.com/endpoint-rooms-roomId-get.html roomID}
   * @returns {Promise} A new Meeting.
   */
  create(destination) {
    return this.meetingInfo
      .fetchMeetingInfo(destination)
      .then((info) => info)
      .catch((err) => err)
      .then((info) => this.createMeeting(info, destination))
      .catch((err) => err);
  }

  /**
   * @param {String} info see create()
   * @param {String} destination see create()
   * @returns {Meeting} a new meeting instance complete with meeting info and destination
   */
  createMeeting(info, destination) {
    const mtgInfo = info ? info.body : null;
    const meeting = new Meeting(
      // TODO: code review check: lets look at how this was structured in code review, does it make sense to set sip URI at this stage?
      // or should it be done at the same stage as set MeetingInfo? after the meeting object has been created? because in some cases
      // the sip uri is not available right away
      {
        userId: this.spark.internal.device.userId,
        deviceUrl: this.spark.internal.device.url,
        roapSeq: 0,
        meetingInfo: mtgInfo || {}
      },
      {
        parent: this.spark
      }
    );
    // TODO: code review check: that said, 1:1 will always be done with sipUri, and setMeetingInfo will overwrrite it if info exists as necessary
    meeting.parseMeetingInfo(mtgInfo);
    if (!meeting.sipUri) {
      meeting.setSipUri(destination);
    }

    return MeetingCollection.set(meeting);
    // Create the meeting calling the necessary service endpoints.

    // Internally, there are many more destinations:
    //
    // - locusID
    // - meetingURL
    // - globalMeetingID, e.g, *00*meetingID
    // - meetingID
    // - meetingURL
    // - PSTN
    // - phone number
    //
    // Our job is to determine the appropriate one
    // and its corresponding service so that developers
    // need only sipURL or spaceID to get a meeting
    // and its ID, but have the option to use createWithType()
    // and specify those types to get meetingInfo
  }

  /**
   * Get all meetings.
   * @param {object} options
   * @param {object} options.startDate - get meetings after this start date
   * @param {object} options.endDate - get meetings before this end date
   * @returns {Object} All active and scheduled meetings.
   */
  static getAll() {
    // Options may include other parameters to filter this collection
    // of meetings.
    return MeetingCollection.getAll({});
  }

  /**
   * Get all active meetings.
   * @returns {Object} All active meetings.
   */
  static getActiveMeetings() {
    return MeetingCollection.getAll({active: true});
  }

  /**
   * Get all scheduled meetings.
   * @param {object} options
   * @param {object} options.startDate - get meetings after this start date
   * @param {object} options.endDate - get meetings before this end date
   * @returns {Object} All scheduled meetings.
   */
  static getScheduledMeetings() {
    return MeetingCollection.getAll({scheduled: true});
  }
}
