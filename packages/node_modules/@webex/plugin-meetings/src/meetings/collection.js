import {pickBy, find} from 'lodash';

import Collection from '../common/collection';
/**
 * @export
 * @class MeetingCollection
 */
export default class MeetingCollection extends Collection {
  /**
   * @constructor
   * @public
   * @memberof MeetingCollection
   */
  constructor() {
    super('meetings');
  }

  set(meeting) {
    this.meetings[meeting.id] = meeting;

    return this.meetings[meeting.id];
  }

  /**
   * remove the meeting at the id
   * @param {String} meetingId ID of the meeting you wish to remove from the collection
   * @returns {Meeting} returns the meeting that was removed
   * @public
   * @memberOf
   */
  remove(meetingId) {
    const deleted = this.meetings[meetingId];

    this.meetings[meetingId] = null;
    delete this.meetings[meetingId];

    return deleted;
  }

  /**
   * get all the meetings with optional filters
   * @param {Object} options An object containg properties to filter by
   * @param {Boolean} options.active Only return active meetings
   * @returns {Meeting} returns an object map of Meeting instances
   * @public
   * @memberof MeetingCollection
   */
  getAll(options = {active: false}) {
    if (options.active) {
      return pickBy(this.meetings, (value) => value.active);
    }

    return this.meetings;
  }


  /**
   * get a specific meeting searching for key
   * @param {String} key
   * @param {Any} value
   * @returns {Meeting} if found, else returns null
   * @public
   * @memberof MeetingCollection
   */
  getByKey(key, value) {
    if (key && value) {
      return find(this.meetings, (meeting) => (meeting[key] === value));
    }

    return null;
  }
}
