import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {LOCUS, MEETINGS} from '../constants';

import MeetingInfoUtil from './util';
/**
 * @class MeetingInfoRequest
 */
export default class MeetingInfoRequest extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   *
   * @param {Object} options with format of {type: String, desintation: String}
   * where type is PERSONAL_ROOM, SIP_URI, currently, and destination is userId and sipUri respectively
   * @returns {Promise} returns a promise that resolves/rejects the result of the request
   */
  fetchMeetingInfo(options) {
    if (!options || !options.type || !options.destination) {
      throw new Error('MeetingInfo should be fetched with a type and destination specified, see list of valid types and their corresponding values in constants');
    }
    const format = MeetingInfoUtil.getMeetingInfoAPIFormat(options);
    const resourceUrl = MeetingInfoUtil.getResourceUrl(format.type, format.value);
    const requestParams = MeetingInfoUtil.getRequestParams(resourceUrl, format.type, format.value, LOCUS);
    return this.request(requestParams);
  }
}
