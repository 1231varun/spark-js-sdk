/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */

import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {MEETINGS} from '../constants';

import MeetingInfoCollection from './collection';
import MeetingInfoRequest from './request';
import MeetingInfoUtil from './util';

/**
 * @class MeetingInfo
 */
export default class MeetingInfo extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  constructor(attrs, options) {
    super({}, options);
    this.meetingInfoRequest = new MeetingInfoRequest({}, options);
  }

  /**
   * @param {string} id
   * @returns {object}
   * @memberof MeetingInfo
   */
  static getMeetingInfo(id) {
    return MeetingInfoCollection.get(id);
  }

  /**
   * @param {string} id
   * @param {object} info
   * @returns {null}
   * @memberof MeetingInfo
   */
  static setMeetingInfo(id, info) {
    MeetingInfoCollection.set(id, info);
  }

  /**
   * Fetches meeting info from the server
   * @param {String} destination one of many different types of destinations to look up info for
   * @param {String} type optional type to match up with the destination value
   * @returns {Promise} returns a meeting info object
   */
  fetchMeetingInfo(destination, type = null) {
    const options = MeetingInfoUtil.generateOptions({
      destination,
      type,
      conversationServiceUrl: this.spark.internal.device.services.conversationServiceUrl
    });
    return this.meetingInfoRequest.fetchMeetingInfo(options).then((info) => {
      MeetingInfo.setMeetingInfo(info.id, info);
      return info;
    }).catch((error) => error);
  }
}
