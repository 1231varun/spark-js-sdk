
/* eslint-env browser */

/* global ciscospark, spark */

/* eslint-disable camelcase */
/* eslint-disable max-nested-callbacks */
/* eslint-disable no-alert */
/* eslint-disable no-console */
/* eslint-disable require-jsdoc */

// Declare some globals that we'll need throughout
let meeting, meetings, newMeeting;
const mediaSettings = [];

// First, let's wire our form fields up to localStorage so we don't have to
// retype things everytime we reload the page.

[
  'access-token'
  // 'invitee'
].forEach((id) => {
  const el = document.getElementById(id);
  el.value = localStorage.getItem(id);
  el.addEventListener('change', (event) => {
    localStorage.setItem(id, event.target.value);
  });
});

function connect() {
  if (!window.spark) {
    window.spark = ciscospark.init({
      config: {
        // Any other sdk config we need
      },
      credentials: {
        access_token: document.getElementById('access-token').value
      }
    });
  }

  if (!spark.internal.device.registered) {
    spark.internal.device
      .register()
      .then(() => {
        // This is just a little helper for our selenium tests and doesn't
        // really matter for the example
        document.body.classList.add('listening');
        document.getElementById('connection-status').innerHTML = 'connected';
        // return this.spark.internal.device.register()
        return spark.internal.mercury.connect();
      })
      // This is a terrible way to handle errors, but anything more specific is
      // going to depend a lot on your app
      .catch((err) => {
        console.error(err);
        // we'll rethrow here since we didn't really *handle* the error, we just
        // reported it
        throw err;
      });
  }

  // TODO: handle when other user answers outgoing call, update the HTML
  spark.meetings.on('meeting:ringing', (m) => {
    if (m.type === 'INCOMING') {
      document.getElementById('ringing-call').innerHTML = 'incoming call';
    }
    if (m.type === 'OUTGOING') {
      document.getElementById('ringing-call').innerHTML = 'outgoing call';
    }
  });

  spark.meetings.on('meeting:added', (m) => {
    if (m.type === 'INCOMING') {
      newMeeting = m.meeting;
      toggleDisplay('incomingsection', true);
      newMeeting.on('meeting:alerted', () => {
        document.getElementById('alerted-call').innerHTML = 'locus notified that user received call';
      });
    }
    console.log('Meeting added ', m);
  });

  spark.meetings.on('meeting:removed', (m) => {
    newMeeting = undefined;
    toggleDisplay('incomingsection', false);
    console.log('Meeting removed ', m);
  });
}

function addMedia() {
  document.getElementsByName('mediadirection').forEach((options) => {
    mediaSettings[options.value] = options.checked;
  });

  // TODO: use meetings plugin or media util method directly
  return meeting.getMediaStreams(mediaSettings)
    .then(([localStream, localShare]) => meeting.addMedia({
      mediaSettings,
      localStream,
      localShare
    })
      .then(() => {
        if (mediaSettings.sendShare && localShare) {
          meeting.share();
        }
      }));
}

function disconnect() {
  if (!spark || !spark.internal || !spark.internal.device) {
    return Promise.reject(new Error('You must have a proper spark intstance to disconnect'));
  }
  if (spark.internal.device.registered) {
    return spark.internal.mercury.disconnect().then(() => spark.internal.device.unregister().then(() => {
      document.getElementById('connection-status').innerHTML = 'disconnected';
      return Promise.resolve();
    }));
  }
  return Promise.resolve();
}

function getParticipantString(list) {
  let string = '';
  list.forEach((p) => {
    string += `${p.person.email},`;
  });
  return string;
}

function startMeeting(m) {
  meeting = m;
  meeting.on('media:ready', (media) => {
    if (!media) {
      return;
    }
    if (media.type === 'local') {
      document.getElementById('localvideo').srcObject = media.stream;
    }
    if (media.type === 'remote') {
      document.getElementById('remotevideo').srcObject = media.stream;
    }
    if (media.type === 'remoteShare') {
      document.getElementById('sharevideo').srcObject = media.stream;
    }
    if (media.type === 'localShare') {
      document.getElementById('localshare').srcObject = media.stream;
    }
  });
  meeting.on('media:stopped', (media) => {
    if (media.type === 'local') {
      document.getElementById('localvideo').srcObject = null;
    }
    if (media.type === 'remote') {
      document.getElementById('remotevideo').srcObject = null;
    }
    if (media.type === 'localShare') {
      document.getElementById('localshare').srcObject = null;
    }
    if (media.type === 'remoteShare') {
      document.getElementById('sharevideo').srcObject = null;
    }
  });
}

window.addEventListener('unload', disconnect, false);

// In order to simplify the state management needed to keep track of our button
// handlers, we'll rely on the current call global object and only hook up event
// handlers once.

document.getElementById('meetings-object').addEventListener('click', () => {
  if (meetings) {
    console.info(meetings);
  }
});

document.getElementById('leave').addEventListener('click', () => {
  if (meeting) {
    meeting.leave();
  }
});

document.getElementById('start-sending-audio').addEventListener('click', () => {
  if (meeting) {
    meeting
      .unmuteAudio()
      .then((res) => {
        console.log('audio unmute resolved', res);
      })
      .catch((rej) => {
        console.log('audio unmute rejected', rej);
      });
  }
});

document.getElementById('stop-sending-audio').addEventListener('click', () => {
  if (meeting) {
    meeting
      .muteAudio()
      .then((res) => {
        console.log('audio mute resolved', res);
      })
      .catch((rej) => {
        console.log('audio mute rejected', rej);
      });
  }
});

document.getElementById('start-sending-video').addEventListener('click', () => {
  if (meeting) {
    meeting
      .unmuteVideo()
      .then((res) => {
        console.log('video unmute resolved', res);
      })
      .catch((rej) => {
        console.log('video unmute rejected', rej);
      });
  }
});

document.getElementById('stop-sending-video').addEventListener('click', () => {
  if (meeting) {
    meeting
      .muteVideo()
      .then((res) => {
        console.log('video mute resolved', res);
      })
      .catch((rej) => {
        console.log('video mute rejected', rej);
      });
  }
});
document.getElementById('start-receiving-audio').addEventListener('click', () => {
  if (meeting) {
    meeting.startReceivingAudio();
  }
});

document.getElementById('stop-receiving-audio').addEventListener('click', () => {
  if (meeting) {
    meeting.stopReceivingAudio();
  }
});

document.getElementById('start-receiving-video').addEventListener('click', () => {
  if (meeting) {
    meeting.startReceivingVideo();
  }
});

document.getElementById('stop-receiving-video').addEventListener('click', () => {
  if (meeting) {
    meeting.stopReceivingVideo();
  }
});

document.getElementById('getStatsRaw').addEventListener('click', () => {
  if (meeting) {
    meeting
      .getStats()
      .withId()
      .withMedia()
      .build()
      .getMedia()
      .withId()
      .withStream(meeting.mediaPeerConnection)
      .build()
      .getStream()
      .on('data', (raw) => {
        console.log(raw);
      });
  }
});

document.getElementById('getStatsFilter').addEventListener('click', () => {
  if (meeting) {
    // meeting
    //   .getStats()
    //   .withMedia()
    //   .build()
    //   .getMedia()
    //   .withId()
    //   .withEvents()
    //   .withHistory()
    //   .withAggregator()
    //   .withInterval()
    //   .withFilter(meeting.mediaPeerConnection)
    //   .build()
    //   .onData((filtered) => {
    //     console.log(filtered);
    //   });
    // OR
    // const stats = meeting.getStats().withId().withMedia().build();
    // const media = stats.getMedia()...
    // media.doData((filtered) => {
    //  do stuff
    // })
    // OR
    meeting.getStats({
      media: {
        id: true,
        history: true,
        interval: true,
        aggregator: true,
        filter: meeting.mediaPeerConnection,
        events: true
      }
    });
    meeting
      .getStats()
      .getMedia()
      .onData((filtered) => {
        console.log(filtered);
      });
    meeting
      .getStats()
      .getMedia()
      .getEvents()
      .on('stats:update', (stats) => {
        console.log(stats);
      });
  }
});

document.getElementById('getAggregation').addEventListener('click', () => {
  if (meeting) {
    console.log(
      meeting
        .getStats()
        .getMedia()
        .getAggregator()
        .get()
    );
  }
});

document.getElementById('getHistory').addEventListener('click', () => {
  if (meeting) {
    console.log(
      meeting
        .getStats()
        .getMedia()
        .getHistory()
        .get()
    );
  }
});

document.getElementById('getInterval').addEventListener('click', () => {
  if (meeting) {
    console.log(
      meeting
        .getStats()
        .getMedia()
        .getInterval()
        .get()
    );
  }
});

document.getElementById('credentials').addEventListener('submit', (event) => {
  // let's make sure we don't reload the page when we submit the form
  event.preventDefault();
  connect();
});

document.getElementById('disconnect').addEventListener('submit', (event) => {
  event.preventDefault();
  disconnect();
});

document.getElementById('scheduled-meetings').addEventListener('submit', (event) => {
  document.getElementById('scheduled-meetings-div').innerHTML = '';
  event.preventDefault();
  return spark.internal.calendar.list({max: 200}).then((meetings) => {
    Object.keys(meetings).forEach((key) => {
      const entry = meetings[key];
      document.getElementById('scheduled-meetings-div').innerHTML += `-- ${entry.encryptedSubject} < | > ${entry.start} --`;
    });
  });
});

document.getElementById('scheduled-meetings-events').addEventListener('submit', (event) => {
  event.preventDefault();
  spark.internal.mercury.on('event:calendar.meeting.create', (scheduledMeeting) => {
    document.getElementById('scheduled-meeting-events-p').innerHTML += `--CREATED: ${scheduledMeeting.data.calendarMeetingExternal.encryptedSubject} < | > ${scheduledMeeting.data.calendarMeetingExternal.start} --`;
  });
  spark.internal.mercury.on('event:calendar.meeting.create.minimal', (scheduledMeeting) => {
    document.getElementById('scheduled-meeting-events-p').innerHTML += `--CREATED: ${scheduledMeeting.data.calendarMeetingExternal.encryptedSubject} < | > ${scheduledMeeting.data.calendarMeetingExternal.start} --`;
  });
  spark.internal.mercury.on('event:calendar.meeting.update', (scheduledMeeting) => {
    document.getElementById('scheduled-meeting-events-p').innerHTML += `--UPDATED: ${scheduledMeeting.data.calendarMeetingExternal.encryptedSubject} < | >  ${scheduledMeeting.data.calendarMeetingExternal.start} --`;
  });
  spark.internal.mercury.on('event:calendar.meeting.update.minimal', (scheduledMeeting) => {
    document.getElementById('scheduled-meeting-events-p').innerHTML += `--UPDATED: ${scheduledMeeting.data.calendarMeetingExternal.encryptedSubject} < | >  ${scheduledMeeting.data.calendarMeetingExternal.start} --`;
  });
  spark.internal.mercury.on('event:calendar.meeting.delete', (scheduledMeeting) => {
    document.getElementById('scheduled-meeting-events-p').innerHTML += `--DELETED: ${scheduledMeeting.data.calendarMeetingExternal.encryptedSubject} < | > ${scheduledMeeting.data.calendarMeetingExternal.start} --`;
  });
});

document.getElementById('PMR').addEventListener('submit', (event) => {
  event.preventDefault();
  return spark.meetings.personalMeetingRoom.get().then((pmr) => {
    console.log(pmr);
    document.getElementById('pmr-info').innerHTML = `PMR INFO: 
      link-${spark.meetings.personalMeetingRoom.meetingLink}-
      uri-${spark.meetings.personalMeetingRoom.sipUri}-
      tollFree-${spark.meetings.personalMeetingRoom.pmr.callInNumbersInfo.callInTollFreeNumber.number}-
      toll-${spark.meetings.personalMeetingRoom.pmr.callInNumbersInfo.callInTollNumber.number}-
      accessCode-${spark.meetings.personalMeetingRoom.pmr.meetingNumber}
      `;
  });
});

document.getElementById('PMR-edit').addEventListener('submit', (event) => {
  event.preventDefault();
  const pmrLink = document.getElementById('wbx-pmr-link').value;
  const hostPin = document.getElementById('wbx-pmr-host-pin').value;
  if (!pmrLink && !hostPin) {
    return;
  }
  spark.meetings.personalMeetingRoom.claim(pmrLink, hostPin).then((claimed) => {
    console.log(claimed);
    document.getElementById('pmr-edit-info').innerHTML = `PMR INFO: 
    link-${spark.meetings.personalMeetingRoom.meetingLink}-
    uri-${spark.meetings.personalMeetingRoom.sipUri}-
    tollFree-${spark.meetings.personalMeetingRoom.pmr.callInNumbersInfo.callInTollFreeNumber.number}-
    toll-${spark.meetings.personalMeetingRoom.pmr.callInNumbersInfo.callInTollNumber.number}-
    accessCode-${spark.meetings.personalMeetingRoom.pmr.meetingNumber}
    `;
  }).catch((err) => {
    console.error(err);
  });
});

document.getElementById('invite-participant').addEventListener('submit', (event) => {
  event.preventDefault();
  meeting.invite({emailAddress: document.getElementById('invite-invitee').value}).then((res) => {
    console.log(res);
  });
});

document.getElementById('admit-participant').addEventListener('submit', (event) => {
  event.preventDefault();
  meeting.admit([document.getElementById('admit-invitee').value]).then((res) => {
    console.log(res);
  });
});

// And finally, let's wire up dialing
document.getElementById('dialer').addEventListener('submit', (event) => {
  // again, we don't want to reload when we try to dial
  event.preventDefault();
  return spark.meetings.create(document.getElementById('invitee').value).then((m) => {
    console.log(m);
    startMeeting(m);
  });
});

// And finally, let's wire up dialing
// document.getElementById('getmedia').addEventListener('click', () => {
//   // again, we don't want to reload when we try to dial
//   // const streams = media.getUserMedia();
//   return media.getUser();
// });
// And finally, let's wire up dialing
document.getElementById('join').addEventListener('click', () => {
  // TODO: add resource id if paired
  let deviceId;
  if (spark.devicemanager._pairedDevice) {
    deviceId = spark.devicemanager._pairedDevice.identity.id;
  }

  meeting.join({resourceId: deviceId});

  meeting.participants.on('participants:created', (participants) => {
    document.getElementById('participants-collection').innerHTML = `PARTICIPANTS INFO: 
    selfList-${getParticipantString(participants.selfList)}-
    hostList-${getParticipantString(participants.hostList)}-
    inLobbyList-${getParticipantString(participants.inLobbyList)}-
    inMeetingList-${getParticipantString(participants.inMeetingList)}-
    notInMeetingList-${getParticipantString(participants.notInMeetingList)}-
    `;
  });
});


document.getElementById('addMedia').addEventListener('click', () => {
  addMedia();
});

document.getElementById('incoming-media').addEventListener('click', () => {
  addMedia();
  toggleDisplay('incomingsection', false);
});

document.getElementById('wirelessShare').addEventListener('click', () => {
  event.preventDefault();
  const deviceId = spark.devicemanager._pairedDevice.identity.id;
  // deviceId is the destination to do the share
  return spark.meetings.create(deviceId).then((m) => {
    console.log(m);
    startMeeting(m);
    meeting.join({
      resourceId: deviceId
    })
      .then(() => meeting.getMediaStreams({
        sendAudio: false,
        sendVideo: false,
        sendShare: true
      })
        .then(([localStream, localShare]) => meeting.addMedia({
          mediaSettings: {
            receiveShare: false,
            receiveAudio: false,
            receiveVideo: false
          },
          localShare,
          localStream
        })))
      .then(() => {
        meeting.share();
        toggleDisplay('stopWirelessShare', true);
        toggleDisplay('wirelessShare', false);
      });
  });
});

document.getElementById('stopWirelessShare').addEventListener('click', () => {
  meeting.leave();
  toggleDisplay('stopWirelessShare', false);
  toggleDisplay('wirelessShare', true);
});

document.getElementById('answer').addEventListener('click', () => {
  meeting = newMeeting;
  startMeeting(meeting);
  newMeeting.join();
  toggleDisplay('answer', true, true);
  toggleDisplay('reject', true, true);
  document.getElementById('ringing-call').innerHTML = '';
  document.getElementById('alerted-call').innerHTML = '';
});

document.getElementById('reject').addEventListener('click', () => {
  meeting = newMeeting;
  meeting.decline('BUSY');
  document.getElementById('ringing-call').innerHTML = '';
  document.getElementById('alerted-call').innerHTML = '';
});

function toggleDisplay(elementId, status, disable = false) {
  const element = document.getElementById(elementId);
  if (disable) {
    element.style.disabled = disable;
  }
  else if (status) {
    element.style.display = 'block';
  }
  else {
    element.style.display = 'none';
  }
}
