import testUsers from '@ciscospark/test-helper-test-users';

describe('samples', () => {
  describe('browser-call-with-screenshare', () => {
    describe('normal dialing', () => {
      let mccoy, spock;

      const browserSpock = browser.select('browserSpock');
      const browserMccoy = browser.select('browserMccoy');

      before('create test users', () => testUsers.create({count: 2})
        .then((users) => {
          [spock, mccoy] = users;
        }));

      before('reload browser', () => {
        browser.select('browserSpock').reload();
        browser.select('browserMccoy').reload();
      });

      it('loads the app', () => {
        browser.url('/browser-call-with-screenshare');
      });

      it('connects mccoy\'s browser', () => {
        browserMccoy.assertTitle('Sample: Local Screensharing');
        browserMccoy.setValueInDOM('[placeholder="Your access token"]', mccoy.token.access_token);
        browserMccoy.assertValue('[placeholder="Your access token"]', mccoy.token.access_token);
        browserMccoy.click('[title="connect"]');
        browserMccoy.waitForExist('.listening');
      });

      it('connects spock\'s browser', () => {
        browserSpock.assertTitle('Sample: Local Screensharing');
        browserSpock.setValueInDOM('[placeholder="Your access token"]', spock.token.access_token);
        browserSpock.assertValue('[placeholder="Your access token"]', spock.token.access_token);
        browserSpock.click('[title="connect"]');
        browserSpock.waitForExist('.listening');
      });

      it('places call from spock to mccoy', () => {
        browserSpock.setValue('[placeholder="Person ID or Email Address or SIP URI or Room ID"]', mccoy.emailAddress);
        browserSpock.click('[title="dial"]');

        browserMccoy.acceptAlert(20000);
      });

      it('starts screensharing', () => {
        browser.waitUntil(() => {
          // Test runs too quickly sometimes and tries to click before call is fully established
          if (browserSpock.getText('#screenshare-tracks') !== '1') {
            browserSpock.click('button[title="share screen"]');
            return false;
          }
          return true;
        }, 10000, 'Timed-out waiting for screenshare track to be added', 2000);
      });

      it('stops screensharing', (done) => {
        // Skip test if we never started the screen share
        if (browserSpock.getText('#screenshare-tracks') !== '1') {
          done();
        }
        browser.waitUntil(() => {
          // Test runs too quickly sometimes and tries to click before screenshare is fully established
          if (browserSpock.getText('#screenshare-tracks') !== '0') {
            browserSpock.click('button[title="stop screen share"]');
            return false;
          }
          return true;
        }, 10000, 'Timed-out waiting for screenshare track to be removed', 2000);
      });

      it('starts application sharing', () => {
        // In case previous screen share failed to stop for some reason
        browser.waitUntil(() => {
          if (browserSpock.getText('#screenshare-tracks') === '1') {
            browserSpock.click('button[title="stop screen share"]');
            return false;
          }
          return true;
        }, 10000, 'Timed-out waiting for previous screenshare to stop', 2000);

        browser.waitUntil(() => {
          // Test runs too quickly sometimes and tries to click before screenshare is fully established
          browserSpock.click('button[title="share application"]');
          return browserSpock.getText('#screenshare-tracks') === '1';
        }, 10000, 'Timed-out waiting for application share track to be added', 2000);
      });

      it('ends the call', () => {
        browser.pause(5000);
        browserMccoy.click('[title="hangup"]');
      });
    });
  });
});
