/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 * @private
 */

import {browserOnly, nodeOnly} from '@ciscospark/test-helper-mocha';
import {assert} from '@ciscospark/test-helper-chai';
import testUsers from '@ciscospark/test-helper-test-users';
import Spark from '../../../..';

/* eslint camelcase: [0] */

describe(`spark-core`, () => {
  describe(`Credentials`, () => {
    let user;
    before(() => testUsers.create({count: 1})
      .then(([u]) => {
        user = u;
      }));

    describe(`#refresh()`, () => {
      nodeOnly(it)(`refreshes an access token`, () => {
        const spark = new Spark({
          credentials: user.token
        });

        return spark.credentials.refresh()
          .then(() => {
            assert.isDefined(user.token.access_token);
            assert.isDefined(spark.credentials.supertoken.access_token);
            assert.notEqual(spark.credentials.supertoken.access_token, user.token.access_token);
          });
      });

      browserOnly(it)(`throws without a refresh callback`, () => {
        const spark = new Spark({
          credentials: user.token
        });

        return assert.isRejected(spark.credentials.refresh());
      });

      browserOnly(it)(`refreshes a refresh callback`, () => {
        const spark = new Spark({
          credentials: user.token,
          config: {
            credentials: {
              refreshCallback(s, token) {
                return s.request({
                  method: `POST`,
                  uri: s.config.credentials.tokenUrl,
                  form: {
                    grant_type: `refresh_token`,
                    redirect_uri: s.config.credentials.redirect_uri,
                    refresh_token: token.refresh_token
                  },
                  auth: {
                    user: s.config.credentials.client_id,
                    pass: s.config.credentials.client_secret,
                    sendImmediately: true
                  },
                  shouldRefreshAccessToken: false
                })
                  .then(({body}) => body);
              }
            }
          }
        });

        return spark.credentials.refresh()
          .then(() => {
            assert.isDefined(user.token.access_token);
            assert.isDefined(spark.credentials.supertoken.access_token);
            assert.notEqual(spark.credentials.supertoken.access_token, user.token.access_token);
          });
      });
    });
  });
});
