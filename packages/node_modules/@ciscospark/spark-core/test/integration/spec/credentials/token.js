/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 * @private
 */

import {assert} from '@ciscospark/test-helper-chai';
import sinon from '@ciscospark/test-helper-sinon';
import lolex from 'lolex';
import MockSpark from '@ciscospark/test-helper-mock-spark';
import {Token} from '../../../..';

/* eslint camelcase: [0] */

// eslint-disable-next-line no-empty-function
function noop() {}

describe(`spark-core`, () => {
  describe(`Credentials`, () => {
    describe(`Token`, () => {
      describe(`#downscope()`, () => {
        it(`retrieves an access token with a subset of scopes`, () => token.downscope(`spark:kms`)
          .then((token2) => token2.validate())
          .then((result) => assert.deepEqual(result.scope, [`spark:kms`])));
      });

      describe(`#refresh()`, () => {
        it(`refreshes the token, returning a new Token instance`, () => token.refresh()
          .then((token2) => {
            assert.notEqual(token2.access_token, token.access_token);
            assert.equal(token2.refresh_token, token.refresh_token);
          }));
      });

      describe(`#revoke()`, () => {
        it(`revokes the token`, () => token.revoke()
          .then(() => {
            assert.isUndefined(token.access_token);
            assert.isDefined(token.refresh_token);
            assert.isUndefined(token.expires_in);
          }));
      });
    });
  });
});
