/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@ciscospark/test-helper-chai';
import Spark, {
  MemoryStoreAdapter
} from '../..';
import {set} from 'lodash';

describe(`Spark`, () => {
  let spark;
  beforeEach(() => {
    spark = new Spark();
  });

  describe(`#logger`, () => {
    it(`exists`, () => {
      assert.property(spark, `logger`);
      assert.doesNotThrow(() => {
        spark.logger.log(`test`);
      });
    });
  });

  describe.skip(`.version`, () => {
    it(`exists`, () => {
      assert.property(Spark, `version`);
    });
  });

  describe.skip(`#version`, () => {
    it(`exists`, () => {
      assert.property(spark, `version`);
    });
  });

  describe(`#initialize()`, () => {
    [
      `data`,
      `data.access_token`,
      `data.supertoken`,
      `data.supertoken.access_token`,
      `data.authorization`,
      `data.authorization.supertoken`,
      `data.authorization.supertoken.access_token`,
      `data.credentials`,
      `data.credentials.access_token`,
      `data.credentials.supertoken`,
      `data.credentials.supertoken.access_token`,
      `data.credentials.authorization`,
      `data.credentials.authorization.supertoken`,
      `data.credentials.authorization.supertoken.access_token`
    ].reduce((acc, path) => acc.concat([`ST`, `Bearer ST`].map((str) => {
      const obj = {
        msg: `accepts token string "${str}" at path "${path.split(`.`).slice(1).join(`.`)}"`
      };
      set(obj, path, str);
      return obj;
    })), [])
    .forEach(({msg, data}) => {
      it(msg, () => {
        const spark = new Spark(data);
        assert.isTrue(spark.credentials.canAuthorize);
        assert.equal(spark.credentials.supertoken.access_token, `ST`);
        assert.equal(spark.credentials.supertoken.token_type, `Bearer`);
        assert.isTrue(spark.canAuthorize);
      });
    });
  });


  it(`emits the \`loaded\` event when the storage layer has loaded all data`, () => {
    // I'd love to do this with mock spark, or at least, a mock plugin, but I
    // couldn't get it to work. We do get better coverage this way, but it means
    // that the storage tests are dependent on the credentials implementation.
    const spark = new Spark({
      config: {
        storage: {
          boundedAdapter: MemoryStoreAdapter.preload({
            Credentials: {
              '@': {
                supertoken: {
                  // eslint-disable-next-line camelcase
                  access_token: `AT`
                }
              }
            }
          })
        }
      }
    });

    assert.isFalse(spark.canAuthorize);
    return new Promise((resolve) => {
      spark.once(`loaded`, resolve);
    })
      .then(() => {
        assert.equal(spark.credentials.supertoken.access_token, `AT`);
        assert.isTrue(spark.canAuthorize);
      });
  });
});
