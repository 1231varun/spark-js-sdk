import {assert} from '@ciscospark/test-helper-chai';
import sinon from '@ciscospark/test-helper-sinon';
import MockSpark from '@ciscospark/test-helper-mock-spark';
import Phone from '@ciscospark/plugin-phone';
import AmpState from 'ampersand-state';
import Locus from '@ciscospark/internal-plugin-locus';
import Mercury from '@ciscospark/internal-plugin-mercury';
import Device from '@ciscospark/internal-plugin-wdm';

import {makeLocus} from '../../lib/locus';
import {participantsToCallMemberships} from '../../../src/state-parsers';

describe('plugin-phone', () => {
  describe('state-parsers', () => {
    let spark;

    beforeEach(() => {
      spark = new MockSpark({
        children: {
          device: Device,
          locus: Locus,
          mercury: Mercury,
          phone: Phone,
          people: AmpState.extend({
            inferPersonIdFromUuid: (uuid) => uuid
          })
        }
      });

      sinon.stub(spark.internal.mercury, 'connect').returns(Promise.resolve());

      spark.internal.device.url = 'https://example.com/devices/1';
      spark.config.phone = {
        audioBandwidthLimit: 64000,
        videoBandwidthLimit: 1000000
      };
    });

    describe('#participantsToCallMemberships', () => {
      it('returns an array of membership objects', () => {
        const locus = makeLocus({});
        const memberships = participantsToCallMemberships(spark, locus);
        assert.isTrue(Array.isArray(memberships));
        assert.equal(memberships.length, 2);
      });

      it('associates devices to user memberships', () => {
        const locus = makeLocus({});
        // Add a device to locus participant object
        locus.participants[0].devices = [{
          id: 'a',
          deviceType: 'IPHONE',
          url: 'https://example.com/locus/devices/0/participant/1',
          state: 'IDLE'
        }];
        const memberships = participantsToCallMemberships(spark, locus);
        assert.isTrue(Array.isArray(memberships));
        assert.equal(memberships.length, 2);
      });

      it('creates memberships from unassigned devices', () => {
        const locus = makeLocus({});
        // Add a device to locus participants
        locus.participants.push({
          id: 'a',
          person: {
            id: '88888888-4444-4444-4444-AAAAAAAAAAA1-ROOM'
          },
          type: 'RESOURCE_ROOM',
          url: 'https://example.com/locus/devices/0/participant/1',
          state: 'IDLE'
        });
        const memberships = participantsToCallMemberships(spark, locus);
        assert.isTrue(Array.isArray(memberships));
        assert.equal(memberships.length, 3);
      });
    });
  });
});
