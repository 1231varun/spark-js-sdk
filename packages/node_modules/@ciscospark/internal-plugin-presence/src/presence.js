/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 * @private
 */
import '@ciscospark/internal-plugin-wdm';

import {SparkPlugin} from '@ciscospark/spark-core';

const defaultSubscriptionTtl = 600;

/**
 * @class
 * @extends SparkPlugin
 */
const Presence = SparkPlugin.extend({
  namespace: `Presence`,

  /**
   * Gets the current presence status of a given person or group of person ids
   * @param {string | Array} personIds
   * @returns {Promise}
   */
  get(personIds) {
    let subjects;
    if (!personIds) {
      return Promise.reject(new Error(`A person id is required`));
    }
    if (Array.isArray(personIds)) {
      subjects = personIds;
    }
    else {
      subjects = [personIds];
    }
    return this.spark.request({
      method: `POST`,
      service: `apheleia`,
      resource: `compositions`,
      body: {subjects}
    })
    .then((response) => response.body);
  },

  /**
   * Subscribes to a person's presence status updates
   * Updates are sent via mercury events `apheleia.subscription_update`
   * @param {string | Array} personIds
   * @param {number} subscriptionTtl - Requested length of subscriptions in seconds.
   * @returns {Promise}
   */
  subscribe(personIds, subscriptionTtl = defaultSubscriptionTtl) {
    let subjects;
    if (!personIds) {
      return Promise.reject(new Error(`A person id is required`));
    }
    if (Array.isArray(personIds)) {
      subjects = personIds;
    }
    else {
      subjects = [personIds];
    }
    return this.spark.request({
      method: `POST`,
      api: `apheleia`,
      resource: `subscriptions`,
      body: {
        subjects,
        subscriptionTtl,
        includeStatus: true
      }
    })
    .then((response) => response.body);
  },

  /**
   * Unsubscribes from a single person's presence subscription
   * @param {string | Array} personIds
   * @returns {Promise}
   */
  unsubscribe(personIds) {
    let subjects;
    if (!personIds) {
      return Promise.reject(new Error(`A person id is required`));
    }
    if (Array.isArray(personIds)) {
      subjects = personIds;
    }
    else {
      subjects = [personIds];
    }
    return this.spark.request({
      method: `POST`,
      api: `apheleia`,
      resource: `subscriptions`,
      body: {
        subjects,
        subscriptionTtl: 0,
        includeStatus: true
      }
    });
  },

  /**
   * Sets the status of the current user
   * @param {string} status - active | inactive | ooo | dnd
   * @param {number} ttl - Time To Live for the event in seconds.
   * @returns {Promise}
   */
  setStatus(status, ttl) {
    if (!status) {
      return Promise.reject(new Error(`A status is required`));
    }
    return this.spark.request({
      method: `POST`,
      api: `apheleia`,
      resource: `events`,
      body: {
        subject: this.spark.internal.device.userId,
        eventType: status,
        ttl
      }
    })
      .then((response) => response.body);
  }
});

export default Presence;
