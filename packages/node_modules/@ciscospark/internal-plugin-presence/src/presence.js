/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 * @private
 */
import '@ciscospark/internal-plugin-wdm';

import {SparkPlugin} from '@ciscospark/spark-core';
import {transformSingleStatusResponse, transformStatusResponses} from './transforms';

const defaultSubscriptionTtl = 600;

/**
 * @class
 * @extends SparkPlugin
 */
const Presence = SparkPlugin.extend({
  namespace: `Presence`,

  get(personId) {
    if (!personId) {
      return Promise.reject(new Error(`A person id is required`));
    }
    return this.postCompositions([personId]);
  },

  list(personIds) {
    if (!personIds || !Array.isArray(personIds)) {
      return Promise.reject(new Error(`An array of people ids is required`));
    }
    return this.postCompositions(personIds);
  },

  subscribe(personId, subscriptionTtl = defaultSubscriptionTtl) {
    if (!personId) {
      return Promise.reject(new Error(`A person id is required`));
    }
    return this.postSubscriptions([personId], subscriptionTtl)
      .then((response) => transformStatusResponses(response.body.responses));
  },

  subscribeList(personIds, subscriptionTtl = defaultSubscriptionTtl) {
    if (!personIds || !Array.isArray(personIds)) {
      return Promise.reject(new Error(`An array of people ids is required`));
    }
    return this.postSubscriptions(personIds, subscriptionTtl)
      .then((response) => transformStatusResponses(response.body.responses));
  },

  unsubscribe(personId) {
    if (!personId) {
      return Promise.reject(new Error(`A person id is required`));
    }
    return this.postSubscriptions([personId], 0);
  },

  unsubscribeList(personIds) {
    if (!personIds || !Array.isArray(personIds)) {
      return Promise.reject(new Error(`An array of people ids is required`));
    }
    return this.postSubscriptions(personIds, 0);
  },

  setStatus(status, ttl) {
    if (!status) {
      return Promise.reject(new Error(`A status is required`));
    }
    return this.spark.request({
      method: `POST`,
      api: `apheleia`,
      resource: `events`,
      body: {
        subject: this.spark.internal.device.userId,
        eventType: status,
        ttl
      }
    })
      .then((response) => transformSingleStatusResponse(response.body));
  },

  postCompositions(subjects) {
    return this.spark.request({
      method: `POST`,
      service: `apheleia`,
      resource: `compositions`,
      body: {subjects}
    })
      .then((response) => transformStatusResponses(response.body.statusList));
  },

  postSubscriptions(subjects, subscriptionTtl) {
    return this.spark.request({
      method: `POST`,
      api: `apheleia`,
      resource: `subscriptions`,
      body: {
        subjects,
        subscriptionTtl,
        includeStatus: true
      }
    });
  }
});

export default Presence;
