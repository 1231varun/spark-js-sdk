/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import '../..';

import {assert} from '@ciscospark/test-helper-chai';
import testUsers from '@ciscospark/test-helper-test-users';
import {generateRandomString} from '@ciscospark/test-users-legacy';
import CiscoSpark from '@ciscospark/spark-core';

describe(`plugin-lyra`, () => {
  describe(`Spaces`, () => {
    let participants;
    let lyraMachine;
    let spock;
    let conversation;

    before(`create lyra machine`, () => testUsers.create({
      count: 1,
      config: {
        machineType: `LYRA_SPACE`,
        type: `MACHINE`,
        password: `${generateRandomString(32)}d_wA*`
      }
    })
      .then((machines) => {
        lyraMachine = machines[0];
        lyraMachine.spark = new CiscoSpark({
          credentials: {
            authorization: lyraMachine.token
          }
        });

        // binding to conversation only works with spark board device
        lyraMachine.spark.device.config.defaults.deviceType = `SPARK_BOARD`;
        lyraMachine.spark.device.config.defaults.model = `SparkBoard Test`;
        lyraMachine.spark.device.config.defaults.localizedModel = `SparkJSSDKTest`;
        lyraMachine.spark.device.config.defaults.systemVersion = `SparkJSSDKTest`;
        lyraMachine.spark.device.config.defaults.systemName = `Darling`;

        return lyraMachine.spark.mercury.connect();
      })
      .then(() => lyraMachine.spark.lyra.spaces.get({id: lyraMachine.id}))
      .then((space) => {
        lyraMachine.space = space;
      }));

    before(`create users`, () => testUsers.create({count: 2})
      .then((users) => {
        participants = users;
        spock = participants[0];

        return Promise.all(Array.map(participants, (participant) => {
          participant.spark = new CiscoSpark({
            credentials: {
              authorization: participant.token
            }
          });

          return participant.spark.mercury.connect();
        }));
      }));

    before(`create conversation`, () => participants[0].spark.conversation.create({
      displayName: `Test Lyra Conversation`,
      participants
    })
      .then((c) => {
        conversation = c;
        return conversation;
      }));

    describe(`#list()`, () => {
      before(`ensure participant joined space`, () => spock.spark.lyra.occupants.join(lyraMachine.space));

      it(`returns spaces`, () => spock.spark.lyra.spaces.list()
          .then((spaces) => {
            assert.lengthOf(spaces, 1);
            assert.deepEqual(spaces[0].identity, lyraMachine.space.identity);
          }));
    });

    describe(`#get()`, () => {
      it(`returns space info`, () => spock.spark.lyra.spaces.get(lyraMachine.space)
        .then((lyraSpace) => assert.deepEqual(lyraMachine.space.identity, lyraSpace.identity)));
    });

    describe(`#bindConversation()`, () => {
      before(`ensure participant joined space`, () => spock.spark.lyra.occupants.join(lyraMachine.space)
        .then(() => lyraMachine.spark.lyra.spaces.verifyOccupant(lyraMachine.space, spock.id))
        .then(() => spock.spark.lyra.spaces.bindConversation(lyraMachine.space, conversation)));

      after(`remove binding`, () => spock.spark.lyra.spaces.unbindConversation(lyraMachine.space, conversation));

      it(`binds conversation and lyra space`, () => spock.spark.lyra.spaces.getCurrentBindings(lyraMachine.space)
        .then(({bindings}) => {
          assert.lengthOf(bindings, 1);
          assert.equal(bindings[0].conversationUrl, conversation.url);
        }));
    });

    describe(`#unbindConversation()`, () => {
      before(`ensure participant joined space`, () => spock.spark.lyra.occupants.join(lyraMachine.space)
        .then(() => lyraMachine.spark.lyra.spaces.verifyOccupant(lyraMachine.space, spock.id))
        .then(() => spock.spark.lyra.spaces.bindConversation(lyraMachine.space, conversation))
        .then(() => spock.spark.lyra.spaces.getCurrentBindings(lyraMachine.space))
        .then(({bindings}) => assert.lengthOf(bindings, 1)));

      it(`removes the binding between conversation and lyra space`, () => assert.isFulfilled(spock.spark.lyra.spaces.unbindConversation(lyraMachine.space, conversation))
        .then(() => spock.spark.lyra.spaces.getCurrentBindings(lyraMachine.space))
        .then(({bindings}) => assert.lengthOf(bindings, 0)));
    });

    describe(`#deleteBinding()`, () => {
      let bindingId;
      before(`ensure participant joined space`, () => spock.spark.lyra.occupants.join(lyraMachine.space)
        .then(() => lyraMachine.spark.lyra.spaces.verifyOccupant(lyraMachine.space, spock.id))
        .then(() => spock.spark.lyra.spaces.bindConversation(lyraMachine.space, conversation))
        .then(() => spock.spark.lyra.spaces.getCurrentBindings(lyraMachine.space))
        .then(({bindings}) => {
          assert.lengthOf(bindings, 1);
          bindingId = bindings[0].bindingUrl.split(`/`).pop();
        }));

      it(`removes the binding between conversation and lyra space`, () => assert.isFulfilled(spock.spark.lyra.spaces.deleteBinding(lyraMachine.space, {kmsResourceObjectUrl: conversation.kmsResourceObjectUrl, bindingId}))
        .then(() => spock.spark.lyra.spaces.getCurrentBindings(lyraMachine.space))
        .then(({bindings}) => assert.lengthOf(bindings, 0)));
    });
  });
});
