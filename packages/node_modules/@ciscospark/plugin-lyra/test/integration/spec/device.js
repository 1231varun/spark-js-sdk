/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import '../..';

import {assert} from '@ciscospark/test-helper-chai';
import testUsers from '@ciscospark/test-helper-test-users';
import {generateRandomString} from '@ciscospark/test-users-legacy';
import CiscoSpark from '@ciscospark/spark-core';
import uuid from 'uuid';

describe(`plugin-lyra`, () => {
  describe(`Device`, () => {
    let participants;
    let lyraMachine;
    let spock;
    let conversation;

    before(`create lyra machine`, () => testUsers.create({
      count: 1,
      config: {
        machineType: `LYRA_SPACE`,
        type: `MACHINE`,
        password: `${generateRandomString(32)}d_wA*`
      }
    })
      .then((machines) => {
        lyraMachine = machines[0];
        lyraMachine.spark = new CiscoSpark({
          credentials: {
            authorization: lyraMachine.token
          }
        });

        // binding to conversation only works with spark board device
        lyraMachine.spark.device.config.defaults.deviceType = `SPARK_BOARD`;
        lyraMachine.spark.device.config.defaults.model = `SparkBoard Test`;
        lyraMachine.spark.device.config.defaults.localizedModel = `SparkJSSDKTest`;
        lyraMachine.spark.device.config.defaults.systemVersion = `SparkJSSDKTest`;
        lyraMachine.spark.device.config.defaults.systemName = `Darling`;

        return lyraMachine.spark.mercury.connect();
      })
      .then(() => lyraMachine.spark.lyra.space.get({id: lyraMachine.id}))
      .then((space) => {
        lyraMachine.space = space;
      }));

    before(`create users`, () => testUsers.create({count: 2})
      .then((users) => {
        participants = users;
        spock = participants[0];

        return Promise.all(Array.map(participants, (participant) => {
          participant.spark = new CiscoSpark({
            credentials: {
              authorization: participant.token
            }
          });

          return participant.spark.mercury.connect();
        }));
      }));

    before(`create conversation`, () => participants[0].spark.conversation.create({
      displayName: `Test Lyra Conversation`,
      participants
    })
      .then((c) => {
        conversation = c;
        return conversation;
      }));

    describe(`#getAudioState`, () => {
      let audioState;

      before(`put audio state`, () => {
        audioState = {
          volume: {
            level: 2
          },
          microphones: {
            muted: false
          },
          deviceUrl: lyraMachine.spark.device.url
        };

        return lyraMachine.spark.lyra.device.putAudioState(lyraMachine.space, audioState);
      });

      it(`returns audio state`, () => lyraMachine.spark.lyra.device.getAudioState(lyraMachine.space)
          .then((res) => {
            assert.equal(res.microphones.muted, audioState.microphones.muted);
            assert.equal(res.volume.level, audioState.volume.level);
          }));
    });

    describe(`when a call is in progress`, () => {
      before(`ensure participant joined space`, () => spock.spark.lyra.space.join(lyraMachine.space)
        .then(() => lyraMachine.spark.lyra.space.verifyOccupant(lyraMachine.space, spock.id))
        .then(() => spock.spark.lyra.space.bindConversation(lyraMachine.space, conversation)));

      before(`make a call`, () => {
        const locus = {
          url: conversation.locusUrl,
          correlationId: uuid.v4()
        };

        return spock.spark.request({
          method: `POST`,
          uri: `${locus.url}/participant`,
          body: {
            correlationId: locus.correlationId,
            deviceUrl: spock.spark.device.url,
            localMedias: []
          }
        });
      });

      after(`remove binding`, () => spock.spark.lyra.space.unbindConversation(lyraMachine.space, conversation));

      it(`mutes`, () => {
        spock.spark.lyra.device.mute(lyraMachine.space);
        return lyraMachine.spark.mercury.when(`event:lyra.space_audio_microphones_mute_action`)
          .then(([event]) => {
            assert.equal(event.data.action, `mute`);
          });
      });

      it(`unmutes`, () => {
        spock.spark.lyra.device.unmute(lyraMachine.space);
        return lyraMachine.spark.mercury.when(`event:lyra.space_audio_microphones_mute_action`)
          .then(([event]) => {
            assert.equal(event.data.action, `unMute`);
          });
      });

      it(`increases volume`, () => {
        spock.spark.lyra.device.increaseVolume(lyraMachine.space);
        return lyraMachine.spark.mercury.when(`event:lyra.space_audio_volume_change_action`)
          .then(([event]) => {
            assert.equal(event.data.action, `increase`);
          });
      });

      it(`decreases volume`, () => {
        spock.spark.lyra.device.decreaseVolume(lyraMachine.space);
        return lyraMachine.spark.mercury.when(`event:lyra.space_audio_volume_change_action`)
          .then(([event]) => {
            assert.equal(event.data.action, `decrease`);
          });
      });

      it(`sets volume`, () => {
        spock.spark.lyra.device.setVolume(lyraMachine.space, 2);
        return lyraMachine.spark.mercury.when(`event:lyra.space_audio_volume_set_action`)
          .then(([event]) => {
            assert.equal(event.data.level, 2);
          });
      });
    });
  });
});
