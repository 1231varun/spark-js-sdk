/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@ciscospark/test-helper-chai';
import MockSpark from '@ciscospark/test-helper-mock-spark';
import sinon from '@ciscospark/test-helper-sinon';
import Lyra, {config as lyraConfig} from '../..';

describe(`plugin-lyra`, () => {
  let spark;

  before(() => {
    spark = new MockSpark({
      children: {
        lyra: Lyra
      }
    });
    spark.config.lyra = lyraConfig.lyra;
  });

  beforeEach(() => {
    spark.request.reset();
  });

  describe(`#ping()`, () => {
    it(`sends a ping to lyra service`, () => {
      return spark.lyra.ping()
        .then(() => {
          assert.calledWith(spark.request, sinon.match({
            method: `GET`,
            api: `lyra`,
            resource: `/ping`
          }));
        });
    });
  });

  describe(`#getServiceHealth()`, () => {
    it(`requests lyra service health`, () => {
      return spark.lyra.getServiceHealth()
        .then(() => {
          assert.calledWith(spark.request, sinon.match({
            method: `GET`,
            api: `lyra`,
            resource: `/service_health`
          }));
        });
    });
  });

  describe(`#buildInfo()`, () => {
    it(`request lyra build info`, () => {
      return spark.lyra.getBuildInfo()
        .then(() => {
          assert.calledWith(spark.request, sinon.match({
            method: `GET`,
            api: `lyra`,
            resource: `/build_info`
          }));
        });
    });
  });
});
