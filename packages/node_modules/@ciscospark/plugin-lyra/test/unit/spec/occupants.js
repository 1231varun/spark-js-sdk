/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@ciscospark/test-helper-chai';
import sinon from '@ciscospark/test-helper-sinon';
import MockSpark from '@ciscospark/test-helper-mock-spark';
import Lyra, {config as lyraConfig} from '../..';

describe(`plugin-lyra`, () => {
  const lyraSpaceId = `lyra-1337`;
  const lyraSpaceUrl = `https://lyra/api/v1/${lyraSpaceId}`;
  const lyraSpace = {
    identity: {
      id: lyraSpaceId
    },
    url: lyraSpaceUrl
  };

  let spark;

  before(() => {
    spark = new MockSpark({
      children: {
        lyra: Lyra
      },
      device: {
        url: `deviceUrl`,
        userId: `1234`
      }
    });
    console.log(spark.lyra);
    spark.config.lyra = lyraConfig.lyra;
  });

  beforeEach(() => {
    spark.request.reset();
  });

  describe(`occupants`, () => {
    describe(`#join()`, () => {
      it(`defaults to MANUAL pass type`, () => spark.lyra.occupants.join(lyraSpace)
          .then(() => assert.calledWith(spark.request, sinon.match({
            method: `PUT`,
            uri: `${lyraSpace.url}/occupants/@me`,
            body: {
              pass: {
                type: `MANUAL`
              },
              deviceUrl: `deviceUrl`
            }
          }))));

      it(`allows other pass type`, () => spark.lyra.occupants.join(lyraSpace, {passType: `TEST`})
          .then(() => assert.calledWith(spark.request, sinon.match({
            method: `PUT`,
            uri: `${lyraSpace.url}/occupants/@me`,
            body: {
              pass: {
                type: `TEST`
              },
              deviceUrl: `deviceUrl`
            }
          }))));
    });

    describe(`#putAudioState`, () => {
      it(`requires audioState.deviceUrl`, () => assert.isRejected(spark.lyra.occupants.putAudioState(lyraSpace), /audioState.deviceUrl is required/));
    });

    describe(`#setVolume`, () => {
      it(`defaults to level 0`, () => spark.lyra.occupants.setVolume(lyraSpace)
          .then(() => {
            assert.calledWith(spark.request, sinon.match({
              method: `POST`,
              uri: `${lyraSpace.url}/audio/volume/actions/set/invoke`,
              body: {
                level: 0
              }
            }));
          }));
    });
  });

});
