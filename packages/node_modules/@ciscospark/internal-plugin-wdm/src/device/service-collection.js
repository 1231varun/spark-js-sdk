/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import AmpCollection from 'ampersand-collection';
import ServiceModel from './service-model';

const ServiceCollection = AmpCollection.extend({
  mainIndex: `service`,
  model: ServiceModel,

  markFailedAndCycleUrl(uri) {
    if (!uri) {
      return Promise.reject(new Error(`\`uri\` is a required parameter`));
    }

    return this.inferServiceFromUrl(uri)
      .then((service) => {
        service.markHostFailed(uri);
        return service.cycleNextHost()
          .then(() => service.url);
      });
  },

  inferServiceFromUrl(uri) {
    const services = this.filter((service) => service.doesUrlBelongToService(uri));
    if (services.length >= 1) {
      return Promise.resolve(services[0]);
    }

    return Promise.reject(new Error(`Unable to infer service for this url ${uri}`));
  },

  inferServiceNameFromUrl(uri) {
    return this.inferServiceFromUrl(uri)
      .then((service) => service.service);
  }
});

export default ServiceCollection;
