/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import '@ciscospark/internal-plugin-board';

import {assert} from '@ciscospark/test-helper-chai';
import CiscoSpark from '@ciscospark/spark-core';
import testUsers from '@ciscospark/test-helper-test-users';
import uuid from 'uuid';
import promiseSeries from 'es6-promise-series';

describe(`plugin-board`, () => {
  describe(`realtime - sharing mercury`, () => {
    let board, conversation, participants, secondBoard;
    let mccoy, spock;
    let uniqueRealtimeData;

    before('create users', () => testUsers.create({count: 2})
      .then((users) => {
        participants = [spock, mccoy] = users;

        return Promise.all(Array.map(participants, (participant) => {
          participant.spark = new CiscoSpark({
            credentials: {
              authorization: participant.token
            }
          });
          return participant.spark.internal.device.register()
            .then(() => participant.spark.internal.feature.setFeature('developer', 'web-shared-mercury', true));
        }));
      }));

    before(`create conversation`, () => spock.spark.conversation.create({
      displayName: `Test Board Mercury`,
      participants
    })
      .then((c) => {
        conversation = c;
        return conversation;
      }));

    before(`create channel (board)`, () => spock.spark.board.createChannel(conversation)
      .then((channel) => {
        board = channel;
        return channel;
      }));

    before(`create second channel (board)`, () => mccoy.spark.board.createChannel(conversation)
      .then((channel) => {
        secondBoard = channel;
        return channel;
      }));

    beforeEach(`connect to mercury channel`, () => {
      return Promise.all(Array.map(participants, (participant) => {
        return participant.spark.internal.mercury.connect();
      }));
    });

    afterEach(`disconnect mercury`, () => Promise.all(Array.map(participants, (participant) => {
      return participant.spark.mercury.disconnect();
    })));

    describe(`#publish()`, () => {
      describe(`string payload`, () => {
        let realtimeChannel0;
        let realtimeChannel1;

        before(`open two connections`, () => {
          return Promise.all([
            spock.spark.internal.board.realtime.connectToSharedMercury(board),
            mccoy.spark.internal.board.realtime.connectByOpenNewMercuryConnection(board)
          ]);
        });

        before(`get realtime channels`, () => {
          realtimeChannel0 = spock.spark.internal.board.realtime.realtimeChannels.get(board.channelId);
          realtimeChannel1 = mccoy.spark.internal.board.realtime.realtimeChannels.get(board.channelId);
        });

        after(() => {
          return Promise.all(Array.map(participants, (participant) => {
            return participant.spark.internal.board.realtime.disconnectFromSharedMercury(board);
          }));
        });

        it('posts a message from shared connection to the specified board', (done) => {
          uniqueRealtimeData = uuid.v4();
          const data = {
            envelope: {
              channelId: board,
              roomId: conversation.id
            },
            payload: {
              msg: uniqueRealtimeData
            }
          };

          // participan 1 is going to listen for RT data and confirm that we
          // have the same data that was sent.
          realtimeChannel1.once(`event:board.activity`, ({data}) => {
            assert.equal(data.contentType, `STRING`);
            assert.equal(data.payload.msg, uniqueRealtimeData);
            done();
          });

          // confirm that both are connected.
          assert.isTrue(realtimeChannel0.isSharingMercury, `participant 0 is sharing mercury connection`);
          assert.isTrue(spock.spark.internal.mercury.connected, `participant 0 is connected`);
          assert.isFalse(realtimeChannel1.isSharingMercury, `participant 1 does not share mercury connection`);
          assert.isTrue(mccoy.spark.internal.mercury.connected, `participant 1 is connected`);

          // do not return promise because we want done() to be called on
          // board.activity
          assert.isFulfilled(spock.spark.internal.board.realtime.publish(board, data));
        });

        it('posts a message from separated socket connection to the specified board', (done) => {
          uniqueRealtimeData = uuid.v4();
          const data = {
            envelope: {
              channelId: board,
              roomId: conversation.id
            },
            payload: {
              msg: uniqueRealtimeData
            }
          };

          // participan 0 is going to listen for RT data and confirm that we
          // have the same data that was sent.
          realtimeChannel0.once(`event:board.activity`, ({data}) => {
            assert.equal(data.contentType, `STRING`);
            assert.equal(data.payload.msg, uniqueRealtimeData);
            done();
          });

          // confirm that both are connected.
          assert.isTrue(spock.spark.internal.mercury.connected, `participant 0 is connected`);
          assert.isTrue(realtimeChannel0.isSharingMercury, `participant 0 is sharing mercury connection`);
          assert.isTrue(mccoy.spark.internal.mercury.connected, `participant 1 is connected`);
          assert.isFalse(realtimeChannel1.isSharingMercury, `participant 1 does not share mercury connection`);

          // do not return promise because we want done() to be called on
          // board.activity
          mccoy.spark.internal.board.realtime.publish(board, data);
        });
      });
    });

    describe(`multiple boards`, () => {
      beforeEach(() => {
        uniqueRealtimeData = uuid.v4();
        return promiseSeries([
          spock.spark.internal.board.realtime.connectToSharedMercury.bind(spock.spark.board.realtime, board),
          mccoy.spark.internal.board.realtime.connectToSharedMercury.bind(mccoy.spark.board.realtime, board),
          spock.spark.internal.board.realtime.connectToSharedMercury.bind(spock.spark.board.realtime, secondBoard),
          mccoy.spark.internal.board.realtime.connectToSharedMercury.bind(mccoy.spark.board.realtime, secondBoard)
        ]);
      });

      afterEach(() => {
        return Promise.all(Array.map(participants, (participant) => {
          return promiseSeries([
            participant.spark.internal.board.realtime.disconnectFromSharedMercury.bind(participant.spark.board.realtime, board),
            participant.spark.internal.board.realtime.disconnectFromSharedMercury.bind(participant.spark.board.realtime, secondBoard)
          ]);
        }));
      });

      it(`receives multiple messages from different boards`, (done) => {
        const data1 = {
          envelope: {
            channelId: board,
            roomId: conversation.id
          },
          payload: {
            msg: `first message for ${board.channelId} ${uniqueRealtimeData}`
          }
        };
        const data2 = {
          envelope: {
            channelId: secondBoard,
            roomId: conversation.id
          },
          payload: {
            msg: `second message for ${secondBoard.channelId} ${uniqueRealtimeData}`
          }
        };

        let receivedFirstMsg = false;
        let receivedSecondMsg = false;
        const mccoyRealtimeChannel0 = mccoy.spark.internal.board.realtime.realtimeChannels.get(board.channelId);
        const mccoyRealtimeChannel1 = mccoy.spark.internal.board.realtime.realtimeChannels.get(secondBoard.channelId);

        mccoyRealtimeChannel0.once(`event:board.activity`, ({data}) => {
          assert.equal(data.contentType, `STRING`);
          assert.equal(data.payload.msg, `first message for ${board.channelId} ${uniqueRealtimeData}`);
          receivedFirstMsg = true;
          if (receivedFirstMsg && receivedSecondMsg) {
            done();
          }
        });

        mccoyRealtimeChannel1.once(`event:board.activity`, ({data}) => {
          assert.equal(data.contentType, `STRING`);
          assert.equal(data.payload.msg, `second message for ${secondBoard.channelId} ${uniqueRealtimeData}`);
          receivedSecondMsg = true;
          if (receivedFirstMsg && receivedSecondMsg) {
            done();
          }
        });

        return Promise.all([
          spock.spark.internal.board.realtime.publish(board, data1),
          spock.spark.internal.board.realtime.publish(secondBoard, data2)
        ]);
      });
    });

  });
});
