/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import sinon from 'sinon';
import {assert} from '@ciscospark/test-helper-chai';
import {transforms} from '@ciscospark/internal-plugin-conversation/src/decryption-transforms';

describe('plugin-conversation', () => {
  describe('decryption transforms', () => {
    describe('decryptObject()', () => {
      it('calls the correct method if a recording microappInstance is passed to it', () => {
        const transform = transforms.find((t) => t.name === 'decryptObject');
        const transformStub = sinon.stub();

        const ctx = {
          transform: transformStub
        };
        const key = null;
        const activity = {
          objectType: 'microappInstance'
        };

        transform.fn(ctx, key, activity);

        assert.equal(transformStub.lastCall.args[0], 'decryptMicroappinstance');
      });
    });

    describe('decryptMicroappinstance()', () => {
      it('decrypts the model prop inside of decryptMicroappinstance()', () => {
        const transform = transforms.find((t) => t.name === 'decryptMicroappinstance');
        const transformStub = sinon.stub();

        const ctx = {
          transform: transformStub
        };
        const key = null;
        const microappInstance = {
          model: 'Longencryptedstring'
        };

        transform.fn(ctx, key, microappInstance);

        assert.equal(transformStub.lastCall.args[0], 'decryptPropModel');
      });
    });
  });
});
