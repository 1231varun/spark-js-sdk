import {assert} from '@ciscospark/test-helper-chai';
import {ReportGenerator} from '@ciscospark/internal-plugin-ediscovery';
import activities from './activities';

describe('report-generator', () => {
  const reportId = 'cc06f622-46ab-45b9-b3a6-5d70bad1d70a';

  let generator;
  beforeEach(() => {
    generator = new ReportGenerator();
  });

  describe('Add Activities to Report Tests', () => {
    it('addActivities', async () => {
      generator.add(reportId, activities);
      assert.isOk(generator.zip);
      assert.isOk(generator.folder);
      // Account for 'file' objects that represent folders
      const numberOfFolders = generator.folder.root.split('/').length - 1;
      assert.equal(Object.keys(generator.folder.files).length, activities.length + numberOfFolders);
      for (let i = 0; i < activities.length; i += 1) {
        const activity = activities[i];
        assert.isOk(`${generator.folder.root}${activity.activityId}.eml` in generator.folder.files);
      }
    });

    it('emptyActivities', async () => {
      assert.throws(() => generator.add(reportId, undefined));
      assert.throws(() => generator.add(undefined, activities));
    });
  });

  describe('Save As Tests', () => {
    it('saveAs', async () => {
      generator.add(reportId, activities);
      generator.saveAs(reportId)
        .then(() => assert.isOk(true))
        .catch(() => assert.fail('Report was not downloaded'));
    });

    it('saveAsWithNoAdd', async () => {
      assert.throws(() => generator.saveAs(reportId));
    });
  });
});
