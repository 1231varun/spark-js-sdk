/* eslint-disable prefer-template */
/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {waitForValue, SparkPlugin} from '@ciscospark/spark-core';

import reportRequest from './report-request';

const Ediscovery = SparkPlugin.extend({
  namespace: 'Ediscovery',

  @waitForValue('@')
  createReport(emails, keywords, spaceNames, spaceIds, range) {
    if ((typeof emails === 'undefined' || emails === null)
        || (typeof keywords === 'undefined' || keywords === null)
        || (typeof spaceNames === 'undefined' || spaceNames === null)
        || (typeof spaceIds === 'undefined' || spaceIds === null)
        || (typeof range === 'undefined' || range === null)) {
      throw new Error('Invalid parameter(s)');
    }

    const self = this;
    return this.asUUIDs(emails).then((uuids) => {
      const body = reportRequest;
      body.userIds = uuids;
      body.keywords = keywords;
      body.spaceNames = spaceNames;
      body.spaceIds = spaceIds;
      body.range = range;

      return self.request({
        method: 'POST',
        service: 'ediscovery',
        resource: 'reports',
        body
      }).then((res) => {
        this.logger.info('Create Report Response', res);
        return res;
      }).catch((reason) => {
        this.logger.error('Create Report Error', reason);
        return reason;
      });
    }).catch((reason) => {
      this.logger.error('Failure when converting emails to uuids', reason);
      return reason;
    });
  },

  /**
   * Retrieve the user UUID associated with each supplied email. If an email with no user
   * is found an error is thrown. If multiple such emails exist only the first encountered
   * throws an error.
   *
   * @param {Array.<String>} emails A list of emails to resolve
   * @returns {Promise} The UUIDs associated with the emails
   */
  asUUIDs(emails) {
    if (typeof emails === 'undefined' || emails === null) {
      throw new Error('Invalid parameter');
    }
    if (emails.length <= 0) {
      return Promise.resolve([]);
    }
    const promises = [];
    emails.forEach((userEmail) => {
      promises.push(
        // The people list API only supports a single email
        this.spark.people.list({email: userEmail})
          .then((result) => {
            if (result.items.length <= 0) {
              throw new Error('Unable to find user with email ' + userEmail);
            }
            // User id is base64 encoded and of the format Y2lzY29zcGFyazovL3VzL1BFT1BMRS81ZDU5Yjc5NS02ZmEyLTQ2NTQtOGVjMi03NjlkYjE1YzBkOWU
            const decodedId = Buffer.from(result.items[0].id, 'base64').toString();
            // Decode and strip out the uuid ciscospark://us/PEOPLE/5d59b795-6fa2-4654-8ec2-769db15c0d9e
            const uuid = decodedId.substring(decodedId.lastIndexOf('/') + 1, decodedId.length);
            return uuid;
          })
      );
    });
    return Promise.all(promises);
  },

  @waitForValue('@')
  getReport(reportId) {
    if (typeof reportId === 'undefined' || reportId === null) {
      throw new Error('Invalid parameter(s)');
    }

    const id = reportId;
    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: 'reports/' + id
    }).then((res) => {
      this.logger.info('Get Report Response', res);
      return res;
    }).catch((reason) => {
      this.logger.error('Get Report Error', reason);
      return reason;
    });
  },

  @waitForValue('@')
  getReports() {
    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: 'reports'
    }).then((res) => {
      this.logger.info('Get Reports Response', res);
      return res;
    }).catch((reason) => {
      this.logger.error('Get Reports Error', reason);
      return reason;
    });
  },

  @waitForValue('@')
  deleteReport(reportId) {
    if (typeof reportId === 'undefined' || reportId === null) {
      throw new Error('Invalid parameter(s)');
    }

    const id = reportId;
    return this.request({
      method: 'DELETE',
      service: 'ediscovery',
      resource: 'reports/' + id
    }).then((res) => {
      this.logger.info('Delete Report Response', res);
      return res;
    }).catch((reason) => {
      this.logger.error('Delete Report Error', reason);
      return reason;
    });
  },

  @waitForValue('@')
  restartReport(reportId) {
    if (typeof reportId === 'undefined' || reportId === null) {
      throw new Error('Invalid parameter(s)');
    }

    const id = reportId;
    return this.request({
      method: 'PUT',
      service: 'ediscovery',
      resource: 'reports/' + id
    }).then((res) => {
      this.logger.info('Restart Report Response', res);
      return res;
    }).catch((reason) => {
      this.logger.error('Restart Report Error', reason);
      return reason;
    });
  },

  @waitForValue('@')
  getContentSummary(reportId) {
    if (typeof reportId === 'undefined' || reportId === null) {
      throw new Error('Invalid parameter(s)');
    }

    const id = reportId;
    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: 'reports/' + id + '/contents/summary'
    }).then((res) => {
      console.log(res);
      return res;
    }).catch((reason) => {
      console.log(reason);
      return reason;
    });
  },

  @waitForValue('@')
  getContent(reportId) {
    if (typeof reportId === 'undefined' || reportId === null) {
      throw new Error('Invalid parameter(s)');
    }

    const id = reportId;
    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: 'reports/' + id + '/contents'
    }).then((res) => {
      console.log(res);
      return res;
    }).catch((reason) => {
      console.log(reason);
      return reason;
    });
  }
});

export default Ediscovery;
