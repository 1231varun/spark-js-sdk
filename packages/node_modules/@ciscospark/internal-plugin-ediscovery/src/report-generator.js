import SparkPlugin from '@ciscospark/spark-core';
import JSZip from 'jszip';
import Blob from 'blob';
import saveAs from 'file-saver';
import emlformat from './eml-format';

/**
 * @class ReportGenerator is used to compile, zip, and save an eDiscovery report to disk.
 *
 * Warning: This file is browser specific. It cannot function in a NodeJS server environment.
 */
const ReportGenerator = SparkPlugin.extend({
  namespace: 'Ediscovery',

  props: {
    zip: 'object',
    folder: 'object',
    count: 'number'
  },

  map(activity) {
    if (!activity) {
      throw new Error('Invalid parameter(s)');
    }

    return {
      from: activity.actorId,
      to: {
        name: 'Foo Bar',
        email: 'foo@bar.com'
      },
      subject: activity.activityId,
      text: activity.content
    };
  },

  /**
   * Add activities to the report.
   * @param {String} reportId An id representing the report
   * @param {Object[]} activities Activities that are to form part of the report
   * @returns {Void}
   */
  add(reportId, activities) {
    if (!reportId || !activities) {
      throw new Error('Invalid parameter(s)');
    }

    if (!this.zip) {
      this.zip = new JSZip();
      this.folder = this.zip.folder(`${reportId}/conversation`);
      this.count = 0;
    }

    this.logger.info('Creating Folder Structure');

    for (let i = 0; i < activities.length; i += 1) {
      const activity = activities[i];
      var data = this.map(activity);
      emlformat.build(data, (error, eml) => {
        const blob = new Blob([eml]);
        this.folder.file(`${activity.activityId}.eml`, blob);
      });

    }
  },

  /**
   * Once all the activities have been added create a report and save it to disk.
   * @param {String} reportId An id representing the report
   * @returns {Promise} A promise on the generated report
   */
  saveAs(reportId) {
    if (!reportId) {
      throw new Error('Invalid parameter');
    }

    if (!this.zip) {
      throw new Error('No activites added to report');
    }

    this.logger.info('Creating Zip File');
    return this.zip.generateAsync({type: 'blob'})
      .then((content) => {
        // Download to the user's browser
        this.logger.info('Downloading...');
        saveAs(content, `${reportId}.zip`);
      });
  }
});

export default ReportGenerator;
