import SparkPlugin from '@ciscospark/spark-core';
import JSZip from 'jszip';
import saveAs from 'file-saver';
import MimeBuilder from 'emailjs-mime-builder';

/**
 * @class ReportGenerator is used to compile, zip, and save an eDiscovery report to disk.
 *
 * Warning: This file is browser specific. It cannot function in a NodeJS server environment.
 */
const ReportGenerator = SparkPlugin.extend({
  namespace: 'Ediscovery',

  props: {
    reportId: 'string',
    zip: 'object',
    folder: 'object',
    spaces: 'object'
  },

  /**
   * Create a new report-generator specific to one report.
   *
   * @param {Object} attrs reportId must be included.
   * @param {Object} options Additional options passed up to the parent.
   * @returns {Object} A report generator object.
   */
  initialize(attrs, options) {
    Reflect.apply(SparkPlugin.prototype.initialize, this, [attrs, options]);

    if (!attrs || !attrs.reportId) {
      throw Error('Missing Required Argument reportId');
    }

    this.reportId = attrs.reportId;
  },

  /**
   * Map an activity to an MIME rfc822 formated string that can be saved as an eml file.
   * @param {Object} activity An activity object
   * @returns {String} A string that represents the data stored in an eml file.
   */
  map(activity) {
    if (!activity) {
      throw Error('Invalid activity');
    }

    const mime = new MimeBuilder('multipart/mixed')
      .setHeader('From', activity.actorDisplayName)
      .setHeader('To', 'User Name <username@email.com>') // TODO: Retrieve list of users display names for this space from content summary
      .setHeader('Subject', activity.activityId)
      .setHeader('Date', activity.timestamp);

    let content = activity.objectDisplayName;
    if (activity.verb !== 'post') {
      content = activity.verb;
      // Include the target of the event. e.g. Add Person
      if (activity.objectId) {
        content += ` ${activity.objectId}`;
      }
    }

    mime.createChild('text/plain')
      .setContent(content);

    if (activity.verb === 'share' && activity.files) {
      for (let i = 0; i < activity.files.length; i += 1) {
        const file = activity.files[i];
        if (file.name && file.content) {
          mime.createChild(file.mimeType, {filename: file.name})
            .setContent(file.content)
            .setHeader('Content-Disposition', 'attachment');
        }
      }
    }

    return mime.build();
  },

  /**
   * Add activities to the report.
   * @param {Object[]} activities Activities that are to form part of the report
   * @returns {Void}
   */
  add(activities) {
    if (!activities || !Array.isArray(activities) || !activities.length) {
      throw Error('No supplied activities to add');
    }

    if (!this.zip) {
      this.zip = new JSZip();
      // Top level zip folder is based on the report id
      this.folder = this.zip.folder(`${this.reportId}`);
      this.spaces = {};
    }

    for (let i = 0; i < activities.length; i += 1) {
      const activity = activities[i];

      // If there is no target id use the report id folder
      let space = this.folder;
      if (activity.targetId) {
        if (!(activity.targetId in this.spaces)) {
          // Create sub-folder for space id
          this.spaces[activity.targetId] = this.folder.folder(`${activity.targetId}`);
        }

        space = this.spaces[activity.targetId];
      }

      const data = this.map(activity);
      space.file(`${activity.activityId}.eml`, data);
    }
  },

  /**
   * Once all the activities have been added create a report and save it to disk.
   * @returns {Promise} A promise on the generated report
   */
  saveAs() {
    if (!this.zip) {
      throw Error('No activities added to report');
    }

    return this.zip.generateAsync({type: 'blob'})
      .then((content) => {
        // Download to the user's browser
        this.logger.info('Downloading...');
        saveAs(content, `${this.reportId}.zip`);
      });
  }
});

export default ReportGenerator;
