import SparkPlugin from '@ciscospark/spark-core';
import JSZip from 'jszip';
import Blob from 'blob';
import saveAs from 'file-saver';

/**
 * @class ReportGenerator is used to compile, zip, and download an eDiscovery report.
 *
 * Warning: This file is browser specific. It cannot function in a NodeJS server environment.
 */
const ReportGenerator = SparkPlugin.extend({
  namespace: 'Ediscovery',

  props: {
    reports: 'object'
  },

  /**
   * Add activities to the report.
   * @param reportId An id representing the report
   * @param activities Activities that are to form part of the report
   */
  add(reportId, activities) {
    if (!reportId || !activities) {
      throw new Error('Invalid parameter(s)');
    }

    if (!this[reportId]) {
      const zip = new JSZip();
      const folder = zip.folder(`${reportId}/conversation`);
      this[reportId] = {
        zip,
        folder,
        count: 0
      };
    }

    this.logger.info('Creating Folder Structure');
    const folder = this[reportId].folder;

    let blob = new Blob([], {type: 'application/json'});
    for (let i = 0; i < activities.length; i += 1) {
      blob = new Blob([blob, JSON.stringify(activities[i], null, 4)], {type: 'application/json'});
      // Create file when data pops above 1Mb
      if (blob.size >= 1000000 || i === activities.length - 1) {
        folder.file(`activity${this[reportId].count}.json`, blob);
        blob = new Blob([], {type: 'application/json'});
        this[reportId].count += 1;
      }
    }
  },

  /**
   * Onces all the activities have been added to the report create and download it.
   * @param reportId An id representing the report
   * @returns {*} A promise on the generated report
   */
  downloadAsync(reportId) {
    if (!reportId) {
      throw new Error('Invalid parameter');
    }

    if (!this[reportId]) {
      throw new Error('Report id is associated with no activities');
    }

    this.logger.info('Creating Zip File');
    const zip = this[reportId].zip;
    return zip.generateAsync({type: 'blob'})
      .then((content) => {
        // Download to the users browser
        this.logger.info('Downloading...');
        saveAs(content, `${reportId}.zip`);
      });
  }
});

export default ReportGenerator;
